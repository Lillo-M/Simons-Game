!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/lillo/thewizard/SFML-2.5.1/include/SFML/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
A	Window/Keyboard.hpp	/^        A = 0,        \/\/\/< The A key$/;"	e	enum:sf::Keyboard::Key
Accelerometer	Window/Sensor.hpp	/^        Accelerometer,    \/\/\/< Measures the raw acceleration (m\/s^2)$/;"	e	enum:sf::Sensor::Type
Accepted	Network/Http.hpp	/^            Accepted       = 202, \/\/\/< The request has been accepted, but will be processed l/;"	e	enum:sf::Http::Response::Status
Add	Graphics/BlendMode.hpp	/^        Add,            \/\/\/< Pixel = Src * SrcFactor + Dst * DstFactor$/;"	e	enum:sf::BlendMode::Equation
Add	Window/Keyboard.hpp	/^        Add,          \/\/\/< The + key$/;"	e	enum:sf::Keyboard::Key
AlResource	Audio/AlResource.hpp	/^class SFML_AUDIO_API AlResource$/;"	c	namespace:sf
Any	Network/IpAddress.hpp	/^    static const IpAddress Any;       \/\/\/< Value representing any address (0.0.0.0)$/;"	m	class:sf::IpAddress	typeref:typename:const IpAddress
AnyPort	Network/Socket.hpp	/^        AnyPort = 0 \/\/\/< Special value that tells the system to pick any available port$/;"	e	enum:sf::Socket::__anon91e3839d0103
Arrow	Window/Cursor.hpp	/^        Arrow,                  \/\/\/< Arrow cursor (default)$/;"	e	enum:sf::Cursor::Type
ArrowWait	Window/Cursor.hpp	/^        ArrowWait,              \/\/\/< Busy arrow cursor$/;"	e	enum:sf::Cursor::Type
Ascii	Network/Ftp.hpp	/^        Ascii,  \/\/\/< Text mode using ASCII encoding$/;"	e	enum:sf::Ftp::TransferMode
Attribute	Window/ContextSettings.hpp	/^    enum Attribute$/;"	g	struct:sf::ContextSettings
Axis	Window/Joystick.hpp	/^    enum Axis$/;"	g	class:sf::Joystick
AxisCount	Window/Joystick.hpp	/^        AxisCount   = 8   \/\/\/< Maximum number of supported axes$/;"	e	enum:sf::Joystick::__anon8208ed520103
B	Window/Keyboard.hpp	/^        B,            \/\/\/< The B key$/;"	e	enum:sf::Keyboard::Key
BackSlash	Window/Keyboard.hpp	/^        BackSlash = Backslash,    \/\/\/< \\deprecated Use Backslash instead$/;"	e	enum:sf::Keyboard::Key
BackSpace	Window/Keyboard.hpp	/^        BackSpace = Backspace,    \/\/\/< \\deprecated Use Backspace instead$/;"	e	enum:sf::Keyboard::Key
Backslash	Window/Keyboard.hpp	/^        Backslash,    \/\/\/< The \\ key$/;"	e	enum:sf::Keyboard::Key
Backspace	Window/Keyboard.hpp	/^        Backspace,    \/\/\/< The Backspace key$/;"	e	enum:sf::Keyboard::Key
BadCommandSequence	Network/Ftp.hpp	/^            BadCommandSequence      = 503, \/\/\/< Bad sequence of commands$/;"	e	enum:sf::Ftp::Response::Status
BadGateway	Network/Http.hpp	/^            BadGateway          = 502, \/\/\/< The gateway server has received an error from the/;"	e	enum:sf::Http::Response::Status
BadRequest	Network/Http.hpp	/^            BadRequest          = 400, \/\/\/< The server couldn't understand the request (synta/;"	e	enum:sf::Http::Response::Status
Binary	Network/Ftp.hpp	/^        Binary, \/\/\/< Binary mode (file is transfered as a sequence of bytes)$/;"	e	enum:sf::Ftp::TransferMode
Black	Graphics/Color.hpp	/^    static const Color Black;       \/\/\/< Black predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
BlendMode	Graphics/BlendMode.hpp	/^struct SFML_GRAPHICS_API BlendMode$/;"	s	namespace:sf
Blue	Graphics/Color.hpp	/^    static const Color Blue;        \/\/\/< Blue predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
Bold	Graphics/Text.hpp	/^        Bold          = 1 << 0, \/\/\/< Bold characters$/;"	e	enum:sf::Text::Style
BoolType	Network/Packet.hpp	/^    typedef bool (Packet::*BoolType)(std::size_t);$/;"	t	class:sf::Packet	typeref:typename:bool (Packet::*)(std::size_t)
Broadcast	Network/IpAddress.hpp	/^    static const IpAddress Broadcast; \/\/\/< The "broadcast" address (for sending UDP messages /;"	m	class:sf::IpAddress	typeref:typename:const IpAddress
BufferCount	Audio/SoundStream.hpp	/^        BufferCount = 3,    \/\/\/< Number of audio buffers used by the streaming loop$/;"	e	enum:sf::SoundStream::__anon86780f710203
BufferRetries	Audio/SoundStream.hpp	/^        BufferRetries = 2   \/\/\/< Number of retries (excluding initial try) for onGetData()$/;"	e	enum:sf::SoundStream::__anon86780f710203
Button	Window/Mouse.hpp	/^    enum Button$/;"	g	class:sf::Mouse
ButtonCount	Window/Joystick.hpp	/^        ButtonCount = 32, \/\/\/< Maximum number of supported buttons$/;"	e	enum:sf::Joystick::__anon8208ed520103
ButtonCount	Window/Mouse.hpp	/^        ButtonCount \/\/\/< Keep last -- the total number of mouse buttons$/;"	e	enum:sf::Mouse::Button
Bvec2	Graphics/Glsl.hpp	/^    typedef Vector2<bool> Bvec2;$/;"	t	namespace:sf::Glsl	typeref:typename:Vector2<bool>
Bvec3	Graphics/Glsl.hpp	/^    typedef Vector3<bool> Bvec3;$/;"	t	namespace:sf::Glsl	typeref:typename:Vector3<bool>
Bvec4	Graphics/Glsl.hpp	/^    typedef implementation-defined Bvec4;$/;"	t	namespace:sf::Glsl	typeref:typename:implementation-defined
Bvec4	Graphics/Glsl.hpp	/^    typedef priv::Vector4<bool> Bvec4;$/;"	t	namespace:sf::Glsl	typeref:typename:priv::Vector4<bool>
C	Window/Keyboard.hpp	/^        C,            \/\/\/< The C key$/;"	e	enum:sf::Keyboard::Key
Chunk	Audio/SoundStream.hpp	/^    struct Chunk$/;"	s	class:sf::SoundStream
CircleShape	Graphics/CircleShape.hpp	/^class SFML_GRAPHICS_API CircleShape : public Shape$/;"	c	namespace:sf
Clipboard	Window/Clipboard.hpp	/^class SFML_WINDOW_API Clipboard$/;"	c	namespace:sf
Clock	System/Clock.hpp	/^class SFML_SYSTEM_API Clock$/;"	c	namespace:sf
Close	Window/WindowStyle.hpp	/^        Close      = 1 << 2, \/\/\/< Title bar + close button$/;"	e	enum:sf::Style::__anon00fae70b0103
Closed	Window/Event.hpp	/^        Closed,                 \/\/\/< The window requested to be closed (no data)$/;"	e	enum:sf::Event::EventType
ClosingConnection	Network/Ftp.hpp	/^            ClosingConnection     = 221, \/\/\/< Service closing control connection$/;"	e	enum:sf::Ftp::Response::Status
ClosingDataConnection	Network/Ftp.hpp	/^            ClosingDataConnection = 226, \/\/\/< Closing data connection, requested file action /;"	e	enum:sf::Ftp::Response::Status
Color	Graphics/Color.hpp	/^class SFML_GRAPHICS_API Color$/;"	c	namespace:sf
Comma	Window/Keyboard.hpp	/^        Comma,        \/\/\/< The , key$/;"	e	enum:sf::Keyboard::Key
CommandNotImplemented	Network/Ftp.hpp	/^            CommandNotImplemented   = 502, \/\/\/< Command not implemented$/;"	e	enum:sf::Ftp::Response::Status
CommandUnknown	Network/Ftp.hpp	/^            CommandUnknown          = 500, \/\/\/< Syntax error, command unrecognized$/;"	e	enum:sf::Ftp::Response::Status
ConnectionClosed	Network/Ftp.hpp	/^            ConnectionClosed = 1002, \/\/\/< Not part of the FTP standard, generated by SFML whe/;"	e	enum:sf::Ftp::Response::Status
ConnectionFailed	Network/Ftp.hpp	/^            ConnectionFailed = 1001, \/\/\/< Not part of the FTP standard, generated by SFML whe/;"	e	enum:sf::Ftp::Response::Status
ConnectionFailed	Network/Http.hpp	/^            ConnectionFailed = 1001  \/\/\/< Connection with server failed$/;"	e	enum:sf::Http::Response::Status
ConstIterator	System/String.hpp	/^    typedef std::basic_string<Uint32>::const_iterator ConstIterator; \/\/\/< Read-only iterator /;"	t	class:sf::String	typeref:typename:std::basic_string<Uint32>::const_iterator
Context	Window/Context.hpp	/^class SFML_WINDOW_API Context : GlResource, NonCopyable$/;"	c	namespace:sf
ContextDestroyCallback	Window/GlResource.hpp	/^typedef void(*ContextDestroyCallback)(void*);$/;"	t	namespace:sf	typeref:typename:void (*)(void *)
ContextSettings	Window/ContextSettings.hpp	/^    explicit ContextSettings(unsigned int depth = 0, unsigned int stencil = 0, unsigned int anti/;"	f	struct:sf::ContextSettings
ContextSettings	Window/ContextSettings.hpp	/^struct ContextSettings$/;"	s	namespace:sf
ConvexShape	Graphics/ConvexShape.hpp	/^class SFML_GRAPHICS_API ConvexShape : public Shape$/;"	c	namespace:sf
CoordinateType	Graphics/Texture.hpp	/^    enum CoordinateType$/;"	g	class:sf::Texture
Core	Window/ContextSettings.hpp	/^        Core    = 1 << 0, \/\/\/< Core attribute$/;"	e	enum:sf::ContextSettings::Attribute
Count	Window/Event.hpp	/^        Count                   \/\/\/< Keep last -- the total number of event types$/;"	e	enum:sf::Event::EventType
Count	Window/Joystick.hpp	/^        Count       = 8,  \/\/\/< Maximum number of supported joysticks$/;"	e	enum:sf::Joystick::__anon8208ed520103
Count	Window/Sensor.hpp	/^        Count             \/\/\/< Keep last -- the total number of sensor types$/;"	e	enum:sf::Sensor::Type
Created	Network/Http.hpp	/^            Created        = 201, \/\/\/< The resource has successfully been created$/;"	e	enum:sf::Http::Response::Status
Cross	Window/Cursor.hpp	/^        Cross,                  \/\/\/< Crosshair cursor$/;"	e	enum:sf::Cursor::Type
CurrentTexture	Graphics/Shader.hpp	/^    static CurrentTextureType CurrentTexture;$/;"	m	class:sf::Shader	typeref:typename:CurrentTextureType
CurrentTextureType	Graphics/Shader.hpp	/^    struct CurrentTextureType {};$/;"	s	class:sf::Shader
Cursor	Window/Cursor.hpp	/^class SFML_WINDOW_API Cursor : NonCopyable$/;"	c	namespace:sf
Cyan	Graphics/Color.hpp	/^    static const Color Cyan;        \/\/\/< Cyan predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
D	Window/Keyboard.hpp	/^        D,            \/\/\/< The D key$/;"	e	enum:sf::Keyboard::Key
Dash	Window/Keyboard.hpp	/^        Dash      = Hyphen,       \/\/\/< \\deprecated Use Hyphen instead$/;"	e	enum:sf::Keyboard::Key
Data	Network/TcpSocket.hpp	/^        std::vector<char> Data;         \/\/\/< Data of the packet$/;"	m	struct:sf::TcpSocket::PendingPacket	typeref:typename:std::vector<char>
DataConnectionAlreadyOpened	Network/Ftp.hpp	/^            DataConnectionAlreadyOpened = 125, \/\/\/< Data connection already opened, transfer /;"	e	enum:sf::Ftp::Response::Status
DataConnectionOpened	Network/Ftp.hpp	/^            DataConnectionOpened  = 225, \/\/\/< Data connection open, no transfer in progress$/;"	e	enum:sf::Ftp::Response::Status
DataConnectionUnavailable	Network/Ftp.hpp	/^            DataConnectionUnavailable = 425, \/\/\/< Can't open data connection$/;"	e	enum:sf::Ftp::Response::Status
Debug	Window/ContextSettings.hpp	/^        Debug   = 1 << 2  \/\/\/< Debug attribute$/;"	e	enum:sf::ContextSettings::Attribute
Default	Graphics/RenderStates.hpp	/^    static const RenderStates Default; \/\/\/< Special instance holding the default render state/;"	m	class:sf::RenderStates	typeref:typename:const RenderStates
Default	Window/ContextSettings.hpp	/^        Default = 0,      \/\/\/< Non-debug, compatibility context (this and the core attribute /;"	e	enum:sf::ContextSettings::Attribute
Default	Window/WindowStyle.hpp	/^        Default = Titlebar | Resize | Close \/\/\/< Default window style$/;"	e	enum:sf::Style::__anon00fae70b0103
Delete	Network/Http.hpp	/^            Delete \/\/\/< Request in delete mode, useful for a REST API$/;"	e	enum:sf::Http::Request::Method
Delete	Window/Keyboard.hpp	/^        Delete,       \/\/\/< The Delete key$/;"	e	enum:sf::Keyboard::Key
DirectoryOk	Network/Ftp.hpp	/^            DirectoryOk           = 257, \/\/\/< PATHNAME created$/;"	e	enum:sf::Ftp::Response::Status
DirectoryResponse	Network/Ftp.hpp	/^    class SFML_NETWORK_API DirectoryResponse : public Response$/;"	c	class:sf::Ftp
DirectoryStatus	Network/Ftp.hpp	/^            DirectoryStatus       = 212, \/\/\/< Directory status$/;"	e	enum:sf::Ftp::Response::Status
Disconnected	Network/Socket.hpp	/^        Disconnected, \/\/\/< The TCP socket has been disconnected$/;"	e	enum:sf::Socket::Status
Divide	Window/Keyboard.hpp	/^        Divide,       \/\/\/< The \/ key$/;"	e	enum:sf::Keyboard::Key
Done	Network/Socket.hpp	/^        Done,         \/\/\/< The socket has sent \/ received the data$/;"	e	enum:sf::Socket::Status
Down	Window/Keyboard.hpp	/^        Down,         \/\/\/< Down arrow$/;"	e	enum:sf::Keyboard::Key
Drawable	Graphics/Drawable.hpp	/^class SFML_GRAPHICS_API Drawable$/;"	c	namespace:sf
DstAlpha	Graphics/BlendMode.hpp	/^        DstAlpha,         \/\/\/< (dst.a, dst.a, dst.a, dst.a)$/;"	e	enum:sf::BlendMode::Factor
DstColor	Graphics/BlendMode.hpp	/^        DstColor,         \/\/\/< (dst.r, dst.g, dst.b, dst.a)$/;"	e	enum:sf::BlendMode::Factor
Dynamic	Graphics/VertexBuffer.hpp	/^        Dynamic, \/\/\/< Occasionally changing data$/;"	e	enum:sf::VertexBuffer::Usage
E	Window/Keyboard.hpp	/^        E,            \/\/\/< The E key$/;"	e	enum:sf::Keyboard::Key
Ebcdic	Network/Ftp.hpp	/^        Ebcdic  \/\/\/< Text mode using EBCDIC encoding$/;"	e	enum:sf::Ftp::TransferMode
End	Window/Keyboard.hpp	/^        End,          \/\/\/< The End key$/;"	e	enum:sf::Keyboard::Key
Enter	Window/Keyboard.hpp	/^        Enter,        \/\/\/< The Enter\/Return keys$/;"	e	enum:sf::Keyboard::Key
EnteringPassiveMode	Network/Ftp.hpp	/^            EnteringPassiveMode   = 227, \/\/\/< Entering passive mode$/;"	e	enum:sf::Ftp::Response::Status
Equal	Window/Keyboard.hpp	/^        Equal,        \/\/\/< The = key$/;"	e	enum:sf::Keyboard::Key
Equation	Graphics/BlendMode.hpp	/^    enum Equation$/;"	g	struct:sf::BlendMode
Error	Network/Socket.hpp	/^        Error         \/\/\/< An unexpected error happened$/;"	e	enum:sf::Socket::Status
Escape	Window/Keyboard.hpp	/^        Escape,       \/\/\/< The Escape key$/;"	e	enum:sf::Keyboard::Key
Event	Window/Event.hpp	/^class Event$/;"	c	namespace:sf
EventType	Window/Event.hpp	/^    enum EventType$/;"	g	class:sf::Event
F	Window/Keyboard.hpp	/^        F,            \/\/\/< The F key$/;"	e	enum:sf::Keyboard::Key
F1	Window/Keyboard.hpp	/^        F1,           \/\/\/< The F1 key$/;"	e	enum:sf::Keyboard::Key
F10	Window/Keyboard.hpp	/^        F10,          \/\/\/< The F10 key$/;"	e	enum:sf::Keyboard::Key
F11	Window/Keyboard.hpp	/^        F11,          \/\/\/< The F11 key$/;"	e	enum:sf::Keyboard::Key
F12	Window/Keyboard.hpp	/^        F12,          \/\/\/< The F12 key$/;"	e	enum:sf::Keyboard::Key
F13	Window/Keyboard.hpp	/^        F13,          \/\/\/< The F13 key$/;"	e	enum:sf::Keyboard::Key
F14	Window/Keyboard.hpp	/^        F14,          \/\/\/< The F14 key$/;"	e	enum:sf::Keyboard::Key
F15	Window/Keyboard.hpp	/^        F15,          \/\/\/< The F15 key$/;"	e	enum:sf::Keyboard::Key
F2	Window/Keyboard.hpp	/^        F2,           \/\/\/< The F2 key$/;"	e	enum:sf::Keyboard::Key
F3	Window/Keyboard.hpp	/^        F3,           \/\/\/< The F3 key$/;"	e	enum:sf::Keyboard::Key
F4	Window/Keyboard.hpp	/^        F4,           \/\/\/< The F4 key$/;"	e	enum:sf::Keyboard::Key
F5	Window/Keyboard.hpp	/^        F5,           \/\/\/< The F5 key$/;"	e	enum:sf::Keyboard::Key
F6	Window/Keyboard.hpp	/^        F6,           \/\/\/< The F6 key$/;"	e	enum:sf::Keyboard::Key
F7	Window/Keyboard.hpp	/^        F7,           \/\/\/< The F7 key$/;"	e	enum:sf::Keyboard::Key
F8	Window/Keyboard.hpp	/^        F8,           \/\/\/< The F8 key$/;"	e	enum:sf::Keyboard::Key
F9	Window/Keyboard.hpp	/^        F9,           \/\/\/< The F9 key$/;"	e	enum:sf::Keyboard::Key
Factor	Graphics/BlendMode.hpp	/^    enum Factor$/;"	g	struct:sf::BlendMode
FieldTable	Network/Http.hpp	/^        typedef std::map<std::string, std::string> FieldTable;$/;"	t	class:sf::Http::Request	typeref:typename:std::map<std::string,std::string>
FieldTable	Network/Http.hpp	/^        typedef std::map<std::string, std::string> FieldTable;$/;"	t	class:sf::Http::Response	typeref:typename:std::map<std::string,std::string>
FileActionAborted	Network/Ftp.hpp	/^            FileActionAborted         = 450, \/\/\/< Requested file action not taken$/;"	e	enum:sf::Ftp::Response::Status
FileActionOk	Network/Ftp.hpp	/^            FileActionOk          = 250, \/\/\/< Requested file action ok$/;"	e	enum:sf::Ftp::Response::Status
FileInputStream	System/FileInputStream.hpp	/^class SFML_SYSTEM_API FileInputStream : public InputStream, NonCopyable$/;"	c	namespace:sf
FileStatus	Network/Ftp.hpp	/^            FileStatus            = 213, \/\/\/< File status$/;"	e	enum:sf::Ftp::Response::Status
FileUnavailable	Network/Ftp.hpp	/^            FileUnavailable         = 550, \/\/\/< Requested action not taken, file unavailable$/;"	e	enum:sf::Ftp::Response::Status
FilenameNotAllowed	Network/Ftp.hpp	/^            FilenameNotAllowed      = 553, \/\/\/< Requested action not taken, file name not all/;"	e	enum:sf::Ftp::Response::Status
FloatRect	Graphics/Rect.hpp	/^typedef Rect<float> FloatRect;$/;"	t	namespace:sf	typeref:typename:Rect<float>
Font	Graphics/Font.hpp	/^class SFML_GRAPHICS_API Font$/;"	c	namespace:sf
Forbidden	Network/Http.hpp	/^            Forbidden           = 403, \/\/\/< The requested page cannot be accessed at all, eve/;"	e	enum:sf::Http::Response::Status
Fragment	Graphics/Shader.hpp	/^        Fragment  \/\/\/< Fragment (pixel) shader$/;"	e	enum:sf::Shader::Type
Ftp	Network/Ftp.hpp	/^class SFML_NETWORK_API Ftp : NonCopyable$/;"	c	namespace:sf
Fullscreen	Window/WindowStyle.hpp	/^        Fullscreen = 1 << 3, \/\/\/< Fullscreen mode (this flag and all others are mutually excl/;"	e	enum:sf::Style::__anon00fae70b0103
G	Window/Keyboard.hpp	/^        G,            \/\/\/< The G key$/;"	e	enum:sf::Keyboard::Key
GainedFocus	Window/Event.hpp	/^        GainedFocus,            \/\/\/< The window gained the focus (no data)$/;"	e	enum:sf::Event::EventType
GatewayTimeout	Network/Http.hpp	/^            GatewayTimeout      = 504, \/\/\/< The gateway server couldn't receive a response fr/;"	e	enum:sf::Http::Response::Status
Geometry	Graphics/Shader.hpp	/^        Geometry, \/\/\/< Geometry shader$/;"	e	enum:sf::Shader::Type
Get	Network/Http.hpp	/^            Get,   \/\/\/< Request in get mode, standard method to retrieve a page$/;"	e	enum:sf::Http::Request::Method
GlFunctionPointer	Window/Context.hpp	/^typedef void (*GlFunctionPointer)();$/;"	t	namespace:sf	typeref:typename:void (*)()
GlResource	Window/GlResource.hpp	/^class SFML_WINDOW_API GlResource$/;"	c	namespace:sf
Glsl	Graphics/Glsl.hpp	/^namespace Glsl$/;"	n	namespace:sf
Glyph	Graphics/Glyph.hpp	/^    Glyph() : advance(0) {}$/;"	f	class:sf::Glyph
Glyph	Graphics/Glyph.hpp	/^class SFML_GRAPHICS_API Glyph$/;"	c	namespace:sf
GlyphTable	Graphics/Font.hpp	/^    typedef std::map<Uint64, Glyph> GlyphTable; \/\/\/< Table mapping a codepoint to its glyph$/;"	t	class:sf::Font	typeref:typename:std::map<Uint64,Glyph>
Gravity	Window/Sensor.hpp	/^        Gravity,          \/\/\/< Measures the direction and intensity of gravity, independent o/;"	e	enum:sf::Sensor::Type
Green	Graphics/Color.hpp	/^    static const Color Green;       \/\/\/< Green predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
Gyroscope	Window/Sensor.hpp	/^        Gyroscope,        \/\/\/< Measures the raw rotation rates (degrees\/s)$/;"	e	enum:sf::Sensor::Type
H	Window/Keyboard.hpp	/^        H,            \/\/\/< The H key$/;"	e	enum:sf::Keyboard::Key
Hand	Window/Cursor.hpp	/^        Hand,                   \/\/\/< Pointing hand cursor$/;"	e	enum:sf::Cursor::Type
Head	Network/Http.hpp	/^            Head,  \/\/\/< Request a page's header only$/;"	e	enum:sf::Http::Request::Method
Help	Window/Cursor.hpp	/^        Help,                   \/\/\/< Help cursor$/;"	e	enum:sf::Cursor::Type
HelpMessage	Network/Ftp.hpp	/^            HelpMessage           = 214, \/\/\/< Help message$/;"	e	enum:sf::Ftp::Response::Status
Home	Window/Keyboard.hpp	/^        Home,         \/\/\/< The Home key$/;"	e	enum:sf::Keyboard::Key
HorizontalWheel	Window/Mouse.hpp	/^        HorizontalWheel \/\/\/< The horizontal mouse wheel$/;"	e	enum:sf::Mouse::Wheel
Http	Network/Http.hpp	/^class SFML_NETWORK_API Http : NonCopyable$/;"	c	namespace:sf
Hyphen	Window/Keyboard.hpp	/^        Hyphen,       \/\/\/< The - key (hyphen)$/;"	e	enum:sf::Keyboard::Key
I	Window/Keyboard.hpp	/^        I,            \/\/\/< The I key$/;"	e	enum:sf::Keyboard::Key
Identification	Window/Joystick.hpp	/^    struct SFML_WINDOW_API Identification$/;"	s	class:sf::Joystick
Identity	Graphics/Transform.hpp	/^    static const Transform Identity; \/\/\/< The identity transform (does nothing)$/;"	m	class:sf::Transform	typeref:typename:const Transform
Image	Graphics/Image.hpp	/^class SFML_GRAPHICS_API Image$/;"	c	namespace:sf
Info	Audio/SoundFileReader.hpp	/^    struct Info$/;"	s	class:sf::SoundFileReader
Info	Graphics/Font.hpp	/^    struct Info$/;"	s	class:sf::Font
InputSoundFile	Audio/InputSoundFile.hpp	/^class SFML_AUDIO_API InputSoundFile : NonCopyable$/;"	c	namespace:sf
InputStream	System/InputStream.hpp	/^class SFML_SYSTEM_API InputStream$/;"	c	namespace:sf
Insert	Window/Keyboard.hpp	/^        Insert,       \/\/\/< The Insert key$/;"	e	enum:sf::Keyboard::Key
InsufficientStorageSpace	Network/Ftp.hpp	/^            InsufficientStorageSpace  = 452, \/\/\/< Requested action not taken; insufficient st/;"	e	enum:sf::Ftp::Response::Status
Int16	Config.hpp	/^    typedef signed   short Int16;$/;"	t	namespace:sf	typeref:typename:signed short
Int32	Config.hpp	/^    typedef signed   int Int32;$/;"	t	namespace:sf	typeref:typename:signed int
Int64	Config.hpp	/^        typedef signed   __int64 Int64;$/;"	t	namespace:sf	typeref:typename:signed __int64
Int64	Config.hpp	/^        typedef signed   long long Int64;$/;"	t	namespace:sf	typeref:typename:signed long long
Int8	Config.hpp	/^    typedef signed   char Int8;$/;"	t	namespace:sf	typeref:typename:signed char
IntRect	Graphics/Rect.hpp	/^typedef Rect<int>   IntRect;$/;"	t	namespace:sf	typeref:typename:Rect<int>
InternalServerError	Network/Http.hpp	/^            InternalServerError = 500, \/\/\/< The server encountered an unexpected error$/;"	e	enum:sf::Http::Response::Status
InvalidFile	Network/Ftp.hpp	/^            InvalidFile      = 1003  \/\/\/< Not part of the FTP standard, generated by SFML whe/;"	e	enum:sf::Ftp::Response::Status
InvalidPos	System/String.hpp	/^    static const std::size_t InvalidPos; \/\/\/< Represents an invalid position in the string$/;"	m	class:sf::String	typeref:typename:const std::size_t
InvalidResponse	Network/Ftp.hpp	/^            InvalidResponse  = 1000, \/\/\/< Not part of the FTP standard, generated by SFML whe/;"	e	enum:sf::Ftp::Response::Status
InvalidResponse	Network/Http.hpp	/^            InvalidResponse  = 1000, \/\/\/< Response is not a valid HTTP one$/;"	e	enum:sf::Http::Response::Status
IpAddress	Network/IpAddress.hpp	/^class SFML_NETWORK_API IpAddress$/;"	c	namespace:sf
Italic	Graphics/Text.hpp	/^        Italic        = 1 << 1, \/\/\/< Italic characters$/;"	e	enum:sf::Text::Style
Iterator	System/String.hpp	/^    typedef std::basic_string<Uint32>::iterator       Iterator;      \/\/\/< Iterator type$/;"	t	class:sf::String	typeref:typename:std::basic_string<Uint32>::iterator
Ivec2	Graphics/Glsl.hpp	/^    typedef Vector2<int> Ivec2;$/;"	t	namespace:sf::Glsl	typeref:typename:Vector2<int>
Ivec3	Graphics/Glsl.hpp	/^    typedef Vector3<int> Ivec3;$/;"	t	namespace:sf::Glsl	typeref:typename:Vector3<int>
Ivec4	Graphics/Glsl.hpp	/^    typedef implementation-defined Ivec4;$/;"	t	namespace:sf::Glsl	typeref:typename:implementation-defined
Ivec4	Graphics/Glsl.hpp	/^    typedef priv::Vector4<int> Ivec4;$/;"	t	namespace:sf::Glsl	typeref:typename:priv::Vector4<int>
J	Window/Keyboard.hpp	/^        J,            \/\/\/< The J key$/;"	e	enum:sf::Keyboard::Key
Joystick	Window/Joystick.hpp	/^class SFML_WINDOW_API Joystick$/;"	c	namespace:sf
JoystickButtonEvent	Window/Event.hpp	/^    struct JoystickButtonEvent$/;"	s	class:sf::Event
JoystickButtonPressed	Window/Event.hpp	/^        JoystickButtonPressed,  \/\/\/< A joystick button was pressed (data in event.joystickBut/;"	e	enum:sf::Event::EventType
JoystickButtonReleased	Window/Event.hpp	/^        JoystickButtonReleased, \/\/\/< A joystick button was released (data in event.joystickBu/;"	e	enum:sf::Event::EventType
JoystickConnectEvent	Window/Event.hpp	/^    struct JoystickConnectEvent$/;"	s	class:sf::Event
JoystickConnected	Window/Event.hpp	/^        JoystickConnected,      \/\/\/< A joystick was connected (data in event.joystickConnect)$/;"	e	enum:sf::Event::EventType
JoystickDisconnected	Window/Event.hpp	/^        JoystickDisconnected,   \/\/\/< A joystick was disconnected (data in event.joystickConne/;"	e	enum:sf::Event::EventType
JoystickMoveEvent	Window/Event.hpp	/^    struct JoystickMoveEvent$/;"	s	class:sf::Event
JoystickMoved	Window/Event.hpp	/^        JoystickMoved,          \/\/\/< The joystick moved along an axis (data in event.joystick/;"	e	enum:sf::Event::EventType
K	Window/Keyboard.hpp	/^        K,            \/\/\/< The K key$/;"	e	enum:sf::Keyboard::Key
Key	Window/Keyboard.hpp	/^    enum Key$/;"	g	class:sf::Keyboard
KeyCount	Window/Keyboard.hpp	/^        KeyCount,     \/\/\/< Keep last -- the total number of keyboard keys$/;"	e	enum:sf::Keyboard::Key
KeyEvent	Window/Event.hpp	/^    struct KeyEvent$/;"	s	class:sf::Event
KeyPressed	Window/Event.hpp	/^        KeyPressed,             \/\/\/< A key was pressed (data in event.key)$/;"	e	enum:sf::Event::EventType
KeyReleased	Window/Event.hpp	/^        KeyReleased,            \/\/\/< A key was released (data in event.key)$/;"	e	enum:sf::Event::EventType
Keyboard	Window/Keyboard.hpp	/^class SFML_WINDOW_API Keyboard$/;"	c	namespace:sf
L	Window/Keyboard.hpp	/^        L,            \/\/\/< The L key$/;"	e	enum:sf::Keyboard::Key
LAlt	Window/Keyboard.hpp	/^        LAlt,         \/\/\/< The left Alt key$/;"	e	enum:sf::Keyboard::Key
LBracket	Window/Keyboard.hpp	/^        LBracket,     \/\/\/< The [ key$/;"	e	enum:sf::Keyboard::Key
LControl	Window/Keyboard.hpp	/^        LControl,     \/\/\/< The left Control key$/;"	e	enum:sf::Keyboard::Key
LShift	Window/Keyboard.hpp	/^        LShift,       \/\/\/< The left Shift key$/;"	e	enum:sf::Keyboard::Key
LSystem	Window/Keyboard.hpp	/^        LSystem,      \/\/\/< The left OS specific key: window (Windows and Linux), apple (MacOS/;"	e	enum:sf::Keyboard::Key
Left	Window/Keyboard.hpp	/^        Left,         \/\/\/< Left arrow$/;"	e	enum:sf::Keyboard::Key
Left	Window/Mouse.hpp	/^        Left,       \/\/\/< The left mouse button$/;"	e	enum:sf::Mouse::Button
LineStrip	Graphics/PrimitiveType.hpp	/^    LineStrip,     \/\/\/< List of connected lines, a point uses the previous point to form a li/;"	e	enum:sf::PrimitiveType
Lines	Graphics/PrimitiveType.hpp	/^    Lines,         \/\/\/< List of individual lines$/;"	e	enum:sf::PrimitiveType
LinesStrip	Graphics/PrimitiveType.hpp	/^    LinesStrip     = LineStrip,     \/\/\/< \\deprecated Use LineStrip instead$/;"	e	enum:sf::PrimitiveType
Listener	Audio/Listener.hpp	/^class SFML_AUDIO_API Listener$/;"	c	namespace:sf
ListingResponse	Network/Ftp.hpp	/^    class SFML_NETWORK_API ListingResponse : public Response$/;"	c	class:sf::Ftp
LocalError	Network/Ftp.hpp	/^            LocalError                = 451, \/\/\/< Requested action aborted, local error in pr/;"	e	enum:sf::Ftp::Response::Status
LocalHost	Network/IpAddress.hpp	/^    static const IpAddress LocalHost; \/\/\/< The "localhost" address (for connecting a computer/;"	m	class:sf::IpAddress	typeref:typename:const IpAddress
Lock	System/Lock.hpp	/^class SFML_SYSTEM_API Lock : NonCopyable$/;"	c	namespace:sf
LoggedIn	Network/Ftp.hpp	/^            LoggedIn              = 230, \/\/\/< User logged in, proceed. Logged out if appropri/;"	e	enum:sf::Ftp::Response::Status
LostFocus	Window/Event.hpp	/^        LostFocus,              \/\/\/< The window lost the focus (no data)$/;"	e	enum:sf::Event::EventType
M	Window/Keyboard.hpp	/^        M,            \/\/\/< The M key$/;"	e	enum:sf::Keyboard::Key
Magenta	Graphics/Color.hpp	/^    static const Color Magenta;     \/\/\/< Magenta predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
Magnetometer	Window/Sensor.hpp	/^        Magnetometer,     \/\/\/< Measures the ambient magnetic field (micro-teslas)$/;"	e	enum:sf::Sensor::Type
Mat3	Graphics/Glsl.hpp	/^    typedef implementation-defined Mat3;$/;"	t	namespace:sf::Glsl	typeref:typename:implementation-defined
Mat3	Graphics/Glsl.hpp	/^    typedef priv::Matrix<3, 3> Mat3;$/;"	t	namespace:sf::Glsl	typeref:typename:priv::Matrix<3,3>
Mat4	Graphics/Glsl.hpp	/^    typedef implementation-defined Mat4;$/;"	t	namespace:sf::Glsl	typeref:typename:implementation-defined
Mat4	Graphics/Glsl.hpp	/^    typedef priv::Matrix<4, 4> Mat4;$/;"	t	namespace:sf::Glsl	typeref:typename:priv::Matrix<4,4>
Matrix	Graphics/Glsl.inl	/^    Matrix(const Transform& transform)$/;"	f	struct:Matrix	file:
Matrix	Graphics/Glsl.inl	/^    explicit Matrix(const float* pointer)$/;"	f	struct:Matrix	file:
Matrix	Graphics/Glsl.inl	/^struct Matrix$/;"	s	file:
MaxDatagramSize	Network/UdpSocket.hpp	/^        MaxDatagramSize = 65507 \/\/\/< The maximum number of bytes that can be sent in a single/;"	e	enum:sf::UdpSocket::__anonc973a5060103
MemoryInputStream	System/MemoryInputStream.hpp	/^class SFML_SYSTEM_API MemoryInputStream : public InputStream$/;"	c	namespace:sf
Menu	Window/Keyboard.hpp	/^        Menu,         \/\/\/< The Menu key$/;"	e	enum:sf::Keyboard::Key
Method	Network/Http.hpp	/^        enum Method$/;"	g	class:sf::Http::Request
Middle	Window/Mouse.hpp	/^        Middle,     \/\/\/< The middle (wheel) mouse button$/;"	e	enum:sf::Mouse::Button
Mouse	Window/Mouse.hpp	/^class SFML_WINDOW_API Mouse$/;"	c	namespace:sf
MouseButtonEvent	Window/Event.hpp	/^    struct MouseButtonEvent$/;"	s	class:sf::Event
MouseButtonPressed	Window/Event.hpp	/^        MouseButtonPressed,     \/\/\/< A mouse button was pressed (data in event.mouseButton)$/;"	e	enum:sf::Event::EventType
MouseButtonReleased	Window/Event.hpp	/^        MouseButtonReleased,    \/\/\/< A mouse button was released (data in event.mouseButton)$/;"	e	enum:sf::Event::EventType
MouseEntered	Window/Event.hpp	/^        MouseEntered,           \/\/\/< The mouse cursor entered the area of the window (no data/;"	e	enum:sf::Event::EventType
MouseLeft	Window/Event.hpp	/^        MouseLeft,              \/\/\/< The mouse cursor left the area of the window (no data)$/;"	e	enum:sf::Event::EventType
MouseMoveEvent	Window/Event.hpp	/^    struct MouseMoveEvent$/;"	s	class:sf::Event
MouseMoved	Window/Event.hpp	/^        MouseMoved,             \/\/\/< The mouse cursor moved (data in event.mouseMove)$/;"	e	enum:sf::Event::EventType
MouseWheelEvent	Window/Event.hpp	/^    struct MouseWheelEvent$/;"	s	class:sf::Event
MouseWheelMoved	Window/Event.hpp	/^        MouseWheelMoved,        \/\/\/< The mouse wheel was scrolled (data in event.mouseWheel) /;"	e	enum:sf::Event::EventType
MouseWheelScrollEvent	Window/Event.hpp	/^    struct MouseWheelScrollEvent$/;"	s	class:sf::Event
MouseWheelScrolled	Window/Event.hpp	/^        MouseWheelScrolled,     \/\/\/< The mouse wheel was scrolled (data in event.mouseWheelSc/;"	e	enum:sf::Event::EventType
MovedPermanently	Network/Http.hpp	/^            MovedPermanently = 301, \/\/\/< The requested page has permanently moved to a new lo/;"	e	enum:sf::Http::Response::Status
MovedTemporarily	Network/Http.hpp	/^            MovedTemporarily = 302, \/\/\/< The requested page has temporarily moved to a new lo/;"	e	enum:sf::Http::Response::Status
MultipleChoices	Network/Http.hpp	/^            MultipleChoices  = 300, \/\/\/< The requested page can be accessed from several loca/;"	e	enum:sf::Http::Response::Status
Multiply	Window/Keyboard.hpp	/^        Multiply,     \/\/\/< The * key$/;"	e	enum:sf::Keyboard::Key
Music	Audio/Music.hpp	/^class SFML_AUDIO_API Music : public SoundStream$/;"	c	namespace:sf
Mutex	System/Mutex.hpp	/^class SFML_SYSTEM_API Mutex : NonCopyable$/;"	c	namespace:sf
N	Window/Keyboard.hpp	/^        N,            \/\/\/< The N key$/;"	e	enum:sf::Keyboard::Key
NOMINMAX	Config.hpp	/^        #define NOMINMAX$/;"	d
NeedAccountToLogIn	Network/Ftp.hpp	/^            NeedAccountToLogIn = 332, \/\/\/< Need account for login$/;"	e	enum:sf::Ftp::Response::Status
NeedAccountToStore	Network/Ftp.hpp	/^            NeedAccountToStore      = 532, \/\/\/< Need account for storing files$/;"	e	enum:sf::Ftp::Response::Status
NeedInformation	Network/Ftp.hpp	/^            NeedInformation    = 350, \/\/\/< Requested file action pending further information$/;"	e	enum:sf::Ftp::Response::Status
NeedPassword	Network/Ftp.hpp	/^            NeedPassword       = 331, \/\/\/< User name ok, need password$/;"	e	enum:sf::Ftp::Response::Status
NoContent	Network/Http.hpp	/^            NoContent      = 204, \/\/\/< The server didn't send any data in return$/;"	e	enum:sf::Http::Response::Status
NoLoop	Audio/SoundStream.hpp	/^        NoLoop = -1 \/\/\/< "Invalid" endSeeks value, telling us to continue uninterrupted$/;"	e	enum:sf::SoundStream::__anon86780f710103
NonCopyable	System/NonCopyable.hpp	/^    NonCopyable() {}$/;"	f	class:sf::NonCopyable
NonCopyable	System/NonCopyable.hpp	/^class SFML_SYSTEM_API NonCopyable$/;"	c	namespace:sf
None	Network/IpAddress.hpp	/^    static const IpAddress None;      \/\/\/< Value representing an empty\/invalid address$/;"	m	class:sf::IpAddress	typeref:typename:const IpAddress
None	Window/WindowStyle.hpp	/^        None       = 0,      \/\/\/< No border \/ title bar (this flag and all others are mutual/;"	e	enum:sf::Style::__anon00fae70b0103
Normalized	Graphics/Texture.hpp	/^        Normalized, \/\/\/< Texture coordinates in range [0 .. 1]$/;"	e	enum:sf::Texture::CoordinateType
NotAllowed	Window/Cursor.hpp	/^        NotAllowed              \/\/\/< Action not allowed cursor$/;"	e	enum:sf::Cursor::Type
NotEnoughMemory	Network/Ftp.hpp	/^            NotEnoughMemory         = 552, \/\/\/< Requested file action aborted, exceeded stora/;"	e	enum:sf::Ftp::Response::Status
NotFound	Network/Http.hpp	/^            NotFound            = 404, \/\/\/< The requested page doesn't exist$/;"	e	enum:sf::Http::Response::Status
NotImplemented	Network/Http.hpp	/^            NotImplemented      = 501, \/\/\/< The server doesn't implement a requested feature$/;"	e	enum:sf::Http::Response::Status
NotLoggedIn	Network/Ftp.hpp	/^            NotLoggedIn             = 530, \/\/\/< Not logged in$/;"	e	enum:sf::Ftp::Response::Status
NotModified	Network/Http.hpp	/^            NotModified      = 304, \/\/\/< For conditional requests, means the requested page h/;"	e	enum:sf::Http::Response::Status
NotReady	Network/Socket.hpp	/^        NotReady,     \/\/\/< The socket is not ready to send \/ receive data yet$/;"	e	enum:sf::Socket::Status
Num0	Window/Keyboard.hpp	/^        Num0,         \/\/\/< The 0 key$/;"	e	enum:sf::Keyboard::Key
Num1	Window/Keyboard.hpp	/^        Num1,         \/\/\/< The 1 key$/;"	e	enum:sf::Keyboard::Key
Num2	Window/Keyboard.hpp	/^        Num2,         \/\/\/< The 2 key$/;"	e	enum:sf::Keyboard::Key
Num3	Window/Keyboard.hpp	/^        Num3,         \/\/\/< The 3 key$/;"	e	enum:sf::Keyboard::Key
Num4	Window/Keyboard.hpp	/^        Num4,         \/\/\/< The 4 key$/;"	e	enum:sf::Keyboard::Key
Num5	Window/Keyboard.hpp	/^        Num5,         \/\/\/< The 5 key$/;"	e	enum:sf::Keyboard::Key
Num6	Window/Keyboard.hpp	/^        Num6,         \/\/\/< The 6 key$/;"	e	enum:sf::Keyboard::Key
Num7	Window/Keyboard.hpp	/^        Num7,         \/\/\/< The 7 key$/;"	e	enum:sf::Keyboard::Key
Num8	Window/Keyboard.hpp	/^        Num8,         \/\/\/< The 8 key$/;"	e	enum:sf::Keyboard::Key
Num9	Window/Keyboard.hpp	/^        Num9,         \/\/\/< The 9 key$/;"	e	enum:sf::Keyboard::Key
Numpad0	Window/Keyboard.hpp	/^        Numpad0,      \/\/\/< The numpad 0 key$/;"	e	enum:sf::Keyboard::Key
Numpad1	Window/Keyboard.hpp	/^        Numpad1,      \/\/\/< The numpad 1 key$/;"	e	enum:sf::Keyboard::Key
Numpad2	Window/Keyboard.hpp	/^        Numpad2,      \/\/\/< The numpad 2 key$/;"	e	enum:sf::Keyboard::Key
Numpad3	Window/Keyboard.hpp	/^        Numpad3,      \/\/\/< The numpad 3 key$/;"	e	enum:sf::Keyboard::Key
Numpad4	Window/Keyboard.hpp	/^        Numpad4,      \/\/\/< The numpad 4 key$/;"	e	enum:sf::Keyboard::Key
Numpad5	Window/Keyboard.hpp	/^        Numpad5,      \/\/\/< The numpad 5 key$/;"	e	enum:sf::Keyboard::Key
Numpad6	Window/Keyboard.hpp	/^        Numpad6,      \/\/\/< The numpad 6 key$/;"	e	enum:sf::Keyboard::Key
Numpad7	Window/Keyboard.hpp	/^        Numpad7,      \/\/\/< The numpad 7 key$/;"	e	enum:sf::Keyboard::Key
Numpad8	Window/Keyboard.hpp	/^        Numpad8,      \/\/\/< The numpad 8 key$/;"	e	enum:sf::Keyboard::Key
Numpad9	Window/Keyboard.hpp	/^        Numpad9,      \/\/\/< The numpad 9 key$/;"	e	enum:sf::Keyboard::Key
O	Window/Keyboard.hpp	/^        O,            \/\/\/< The O key$/;"	e	enum:sf::Keyboard::Key
Ok	Network/Ftp.hpp	/^            Ok                    = 200, \/\/\/< Command ok$/;"	e	enum:sf::Ftp::Response::Status
Ok	Network/Http.hpp	/^            Ok             = 200, \/\/\/< Most common code returned when operation was successfu/;"	e	enum:sf::Http::Response::Status
One	Graphics/BlendMode.hpp	/^        One,              \/\/\/< (1, 1, 1, 1)$/;"	e	enum:sf::BlendMode::Factor
OneMinusDstAlpha	Graphics/BlendMode.hpp	/^        OneMinusDstAlpha  \/\/\/< (1, 1, 1, 1) - (dst.a, dst.a, dst.a, dst.a)$/;"	e	enum:sf::BlendMode::Factor
OneMinusDstColor	Graphics/BlendMode.hpp	/^        OneMinusDstColor, \/\/\/< (1, 1, 1, 1) - (dst.r, dst.g, dst.b, dst.a)$/;"	e	enum:sf::BlendMode::Factor
OneMinusSrcAlpha	Graphics/BlendMode.hpp	/^        OneMinusSrcAlpha, \/\/\/< (1, 1, 1, 1) - (src.a, src.a, src.a, src.a)$/;"	e	enum:sf::BlendMode::Factor
OneMinusSrcColor	Graphics/BlendMode.hpp	/^        OneMinusSrcColor, \/\/\/< (1, 1, 1, 1) - (src.r, src.g, src.b, src.a)$/;"	e	enum:sf::BlendMode::Factor
OpeningDataConnection	Network/Ftp.hpp	/^            OpeningDataConnection       = 150, \/\/\/< File status ok, about to open data connec/;"	e	enum:sf::Ftp::Response::Status
Orientation	Window/Sensor.hpp	/^        Orientation,      \/\/\/< Measures the absolute 3D orientation (degrees)$/;"	e	enum:sf::Sensor::Type
OutputSoundFile	Audio/OutputSoundFile.hpp	/^class SFML_AUDIO_API OutputSoundFile : NonCopyable$/;"	c	namespace:sf
P	Window/Keyboard.hpp	/^        P,            \/\/\/< The P key$/;"	e	enum:sf::Keyboard::Key
Packet	Network/Packet.hpp	/^class SFML_NETWORK_API Packet$/;"	c	namespace:sf
Page	Graphics/Font.hpp	/^    struct Page$/;"	s	class:sf::Font
PageDown	Window/Keyboard.hpp	/^        PageDown,     \/\/\/< The Page down key$/;"	e	enum:sf::Keyboard::Key
PageTable	Graphics/Font.hpp	/^    typedef std::map<unsigned int, Page> PageTable; \/\/\/< Table mapping a character size to it/;"	t	class:sf::Font	typeref:typename:std::map<unsigned int,Page>
PageTypeUnknown	Network/Ftp.hpp	/^            PageTypeUnknown         = 551, \/\/\/< Requested action aborted, page type unknown$/;"	e	enum:sf::Ftp::Response::Status
PageUp	Window/Keyboard.hpp	/^        PageUp,       \/\/\/< The Page up key$/;"	e	enum:sf::Keyboard::Key
ParameterNotImplemented	Network/Ftp.hpp	/^            ParameterNotImplemented = 504, \/\/\/< Command not implemented for that parameter$/;"	e	enum:sf::Ftp::Response::Status
ParametersUnknown	Network/Ftp.hpp	/^            ParametersUnknown       = 501, \/\/\/< Syntax error in parameters or arguments$/;"	e	enum:sf::Ftp::Response::Status
Partial	Network/Socket.hpp	/^        Partial,      \/\/\/< The socket sent a part of the data$/;"	e	enum:sf::Socket::Status
PartialContent	Network/Http.hpp	/^            PartialContent = 206, \/\/\/< The server has sent a part of the resource, as a respo/;"	e	enum:sf::Http::Response::Status
Pause	Window/Keyboard.hpp	/^        Pause,        \/\/\/< The Pause key$/;"	e	enum:sf::Keyboard::Key
Paused	Audio/SoundSource.hpp	/^        Paused,  \/\/\/< Sound is paused$/;"	e	enum:sf::SoundSource::Status
PendingPacket	Network/TcpSocket.hpp	/^    struct PendingPacket$/;"	s	class:sf::TcpSocket
Period	Window/Keyboard.hpp	/^        Period,       \/\/\/< The . key$/;"	e	enum:sf::Keyboard::Key
Pixels	Graphics/Texture.hpp	/^        Pixels      \/\/\/< Texture coordinates in range [0 .. size]$/;"	e	enum:sf::Texture::CoordinateType
Playing	Audio/SoundSource.hpp	/^        Playing  \/\/\/< Sound is playing$/;"	e	enum:sf::SoundSource::Status
PointlessCommand	Network/Ftp.hpp	/^            PointlessCommand      = 202, \/\/\/< Command not implemented$/;"	e	enum:sf::Ftp::Response::Status
Points	Graphics/PrimitiveType.hpp	/^    Points,        \/\/\/< List of individual points$/;"	e	enum:sf::PrimitiveType
Post	Network/Http.hpp	/^            Post,  \/\/\/< Request in post mode, usually to send data to a page$/;"	e	enum:sf::Http::Request::Method
PovX	Window/Joystick.hpp	/^        PovX, \/\/\/< The X axis of the point-of-view hat$/;"	e	enum:sf::Joystick::Axis
PovY	Window/Joystick.hpp	/^        PovY  \/\/\/< The Y axis of the point-of-view hat$/;"	e	enum:sf::Joystick::Axis
PrimitiveType	Graphics/PrimitiveType.hpp	/^enum PrimitiveType$/;"	g	namespace:sf
Put	Network/Http.hpp	/^            Put,   \/\/\/< Request in put mode, useful for a REST API$/;"	e	enum:sf::Http::Request::Method
Q	Window/Keyboard.hpp	/^        Q,            \/\/\/< The Q key$/;"	e	enum:sf::Keyboard::Key
Quads	Graphics/PrimitiveType.hpp	/^    Quads,         \/\/\/< List of individual quads (deprecated, don't work with OpenGL ES)$/;"	e	enum:sf::PrimitiveType
Quote	Window/Keyboard.hpp	/^        Quote,        \/\/\/< The ' key$/;"	e	enum:sf::Keyboard::Key
R	Window/Joystick.hpp	/^        R,    \/\/\/< The R axis$/;"	e	enum:sf::Joystick::Axis
R	Window/Keyboard.hpp	/^        R,            \/\/\/< The R key$/;"	e	enum:sf::Keyboard::Key
RAlt	Window/Keyboard.hpp	/^        RAlt,         \/\/\/< The right Alt key$/;"	e	enum:sf::Keyboard::Key
RBracket	Window/Keyboard.hpp	/^        RBracket,     \/\/\/< The ] key$/;"	e	enum:sf::Keyboard::Key
RControl	Window/Keyboard.hpp	/^        RControl,     \/\/\/< The right Control key$/;"	e	enum:sf::Keyboard::Key
RShift	Window/Keyboard.hpp	/^        RShift,       \/\/\/< The right Shift key$/;"	e	enum:sf::Keyboard::Key
RSystem	Window/Keyboard.hpp	/^        RSystem,      \/\/\/< The right OS specific key: window (Windows and Linux), apple (MacO/;"	e	enum:sf::Keyboard::Key
RangeNotSatisfiable	Network/Http.hpp	/^            RangeNotSatisfiable = 407, \/\/\/< The server can't satisfy the partial GET request /;"	e	enum:sf::Http::Response::Status
ReaderFactory	Audio/SoundFileFactory.hpp	/^    struct ReaderFactory$/;"	s	class:sf::SoundFileFactory
ReaderFactoryArray	Audio/SoundFileFactory.hpp	/^    typedef std::vector<ReaderFactory> ReaderFactoryArray;$/;"	t	class:sf::SoundFileFactory	typeref:typename:std::vector<ReaderFactory>
Rect	Graphics/Rect.hpp	/^class Rect$/;"	c	namespace:sf
Rect	Graphics/Rect.inl	/^Rect<T>::Rect() :$/;"	f	class:Rect
Rect	Graphics/Rect.inl	/^Rect<T>::Rect(T rectLeft, T rectTop, T rectWidth, T rectHeight) :$/;"	f	class:Rect
Rect	Graphics/Rect.inl	/^Rect<T>::Rect(const Rect<U>& rectangle) :$/;"	f	class:Rect
Rect	Graphics/Rect.inl	/^Rect<T>::Rect(const Vector2<T>& position, const Vector2<T>& size) :$/;"	f	class:Rect
RectangleShape	Graphics/RectangleShape.hpp	/^class SFML_GRAPHICS_API RectangleShape : public Shape$/;"	c	namespace:sf
Red	Graphics/Color.hpp	/^    static const Color Red;         \/\/\/< Red predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
Regular	Graphics/Text.hpp	/^        Regular       = 0,      \/\/\/< Regular characters, no style$/;"	e	enum:sf::Text::Style
RenderStates	Graphics/RenderStates.hpp	/^class SFML_GRAPHICS_API RenderStates$/;"	c	namespace:sf
RenderTarget	Graphics/RenderTarget.hpp	/^class SFML_GRAPHICS_API RenderTarget : NonCopyable$/;"	c	namespace:sf
RenderTexture	Graphics/RenderTexture.hpp	/^class SFML_GRAPHICS_API RenderTexture : public RenderTarget$/;"	c	namespace:sf
RenderWindow	Graphics/RenderWindow.hpp	/^class SFML_GRAPHICS_API RenderWindow : public Window, public RenderTarget$/;"	c	namespace:sf
Request	Network/Http.hpp	/^    class SFML_NETWORK_API Request$/;"	c	class:sf::Http
ResetContent	Network/Http.hpp	/^            ResetContent   = 205, \/\/\/< The server informs the client that it should clear the/;"	e	enum:sf::Http::Response::Status
Resize	Window/WindowStyle.hpp	/^        Resize     = 1 << 1, \/\/\/< Title bar + resizable border + maximize button$/;"	e	enum:sf::Style::__anon00fae70b0103
Resized	Window/Event.hpp	/^        Resized,                \/\/\/< The window was resized (data in event.size)$/;"	e	enum:sf::Event::EventType
ResourceStream	System/FileInputStream.hpp	/^class SFML_SYSTEM_API ResourceStream;$/;"	v	namespace:sf::priv	typeref:class:SFML_SYSTEM_API
Response	Network/Ftp.hpp	/^    class SFML_NETWORK_API Response$/;"	c	class:sf::Ftp
Response	Network/Http.hpp	/^    class SFML_NETWORK_API Response$/;"	c	class:sf::Http
RestartMarkerReply	Network/Ftp.hpp	/^            RestartMarkerReply          = 110, \/\/\/< Restart marker reply$/;"	e	enum:sf::Ftp::Response::Status
Return	Window/Keyboard.hpp	/^        Return    = Enter         \/\/\/< \\deprecated Use Enter instead$/;"	e	enum:sf::Keyboard::Key
ReverseSubtract	Graphics/BlendMode.hpp	/^        ReverseSubtract \/\/\/< Pixel = Dst * DstFactor - Src * SrcFactor$/;"	e	enum:sf::BlendMode::Equation
Right	Window/Keyboard.hpp	/^        Right,        \/\/\/< Right arrow$/;"	e	enum:sf::Keyboard::Key
Right	Window/Mouse.hpp	/^        Right,      \/\/\/< The right mouse button$/;"	e	enum:sf::Mouse::Button
Row	Graphics/Font.hpp	/^        Row(unsigned int rowTop, unsigned int rowHeight) : width(0), top(rowTop), height(rowHeig/;"	f	struct:sf::Font::Row
Row	Graphics/Font.hpp	/^    struct Row$/;"	s	class:sf::Font
S	Window/Keyboard.hpp	/^        S,            \/\/\/< The S key$/;"	e	enum:sf::Keyboard::Key
SFML_ALRESOURCE_HPP	Audio/AlResource.hpp	/^#define SFML_ALRESOURCE_HPP$/;"	d
SFML_API_EXPORT	Config.hpp	/^            #define SFML_API_EXPORT /;"	d
SFML_API_EXPORT	Config.hpp	/^            #define SFML_API_EXPORT$/;"	d
SFML_API_EXPORT	Config.hpp	/^        #define SFML_API_EXPORT /;"	d
SFML_API_EXPORT	Config.hpp	/^    #define SFML_API_EXPORT$/;"	d
SFML_API_IMPORT	Config.hpp	/^            #define SFML_API_IMPORT /;"	d
SFML_API_IMPORT	Config.hpp	/^            #define SFML_API_IMPORT$/;"	d
SFML_API_IMPORT	Config.hpp	/^        #define SFML_API_IMPORT /;"	d
SFML_API_IMPORT	Config.hpp	/^    #define SFML_API_IMPORT$/;"	d
SFML_AUDIO_API	Audio/Export.hpp	/^    #define SFML_AUDIO_API /;"	d
SFML_AUDIO_EXPORT_HPP	Audio/Export.hpp	/^#define SFML_AUDIO_EXPORT_HPP$/;"	d
SFML_AUDIO_HPP	Audio.hpp	/^#define SFML_AUDIO_HPP$/;"	d
SFML_BLENDMODE_HPP	Graphics/BlendMode.hpp	/^#define SFML_BLENDMODE_HPP$/;"	d
SFML_CIRCLESHAPE_HPP	Graphics/CircleShape.hpp	/^#define SFML_CIRCLESHAPE_HPP$/;"	d
SFML_CLIPBOARD_HPP	Window/Clipboard.hpp	/^#define SFML_CLIPBOARD_HPP$/;"	d
SFML_CLOCK_HPP	System/Clock.hpp	/^#define SFML_CLOCK_HPP$/;"	d
SFML_COLOR_HPP	Graphics/Color.hpp	/^#define SFML_COLOR_HPP$/;"	d
SFML_CONFIG_HPP	Config.hpp	/^#define SFML_CONFIG_HPP$/;"	d
SFML_CONTEXTSETTINGS_HPP	Window/ContextSettings.hpp	/^#define SFML_CONTEXTSETTINGS_HPP$/;"	d
SFML_CONTEXT_HPP	Window/Context.hpp	/^#define SFML_CONTEXT_HPP$/;"	d
SFML_CONVEXSHAPE_HPP	Graphics/ConvexShape.hpp	/^#define SFML_CONVEXSHAPE_HPP$/;"	d
SFML_CURSOR_HPP	Window/Cursor.hpp	/^#define SFML_CURSOR_HPP$/;"	d
SFML_DEBUG	Config.hpp	/^    #define SFML_DEBUG$/;"	d
SFML_DEFINE_DISCRETE_GPU_PREFERENCE	GpuPreference.hpp	/^    #define SFML_DEFINE_DISCRETE_GPU_PREFERENCE /;"	d
SFML_DEFINE_DISCRETE_GPU_PREFERENCE	GpuPreference.hpp	/^    #define SFML_DEFINE_DISCRETE_GPU_PREFERENCE$/;"	d
SFML_DEPRECATED	Config.hpp	/^    #define SFML_DEPRECATED /;"	d
SFML_DEPRECATED	Config.hpp	/^    #define SFML_DEPRECATED$/;"	d
SFML_DRAWABLE_HPP	Graphics/Drawable.hpp	/^#define SFML_DRAWABLE_HPP$/;"	d
SFML_ERR_HPP	System/Err.hpp	/^#define SFML_ERR_HPP$/;"	d
SFML_EVENT_HPP	Window/Event.hpp	/^#define SFML_EVENT_HPP$/;"	d
SFML_FILEINPUTSTREAM_HPP	System/FileInputStream.hpp	/^#define SFML_FILEINPUTSTREAM_HPP$/;"	d
SFML_FONT_HPP	Graphics/Font.hpp	/^#define SFML_FONT_HPP$/;"	d
SFML_FTP_HPP	Network/Ftp.hpp	/^#define SFML_FTP_HPP$/;"	d
SFML_GLRESOURCE_HPP	Window/GlResource.hpp	/^#define SFML_GLRESOURCE_HPP$/;"	d
SFML_GLSL_HPP	Graphics/Glsl.hpp	/^#define SFML_GLSL_HPP$/;"	d
SFML_GLYPH_HPP	Graphics/Glyph.hpp	/^#define SFML_GLYPH_HPP$/;"	d
SFML_GPUPREFERENCE_HPP	GpuPreference.hpp	/^#define SFML_GPUPREFERENCE_HPP$/;"	d
SFML_GRAPHICS_API	Graphics/Export.hpp	/^    #define SFML_GRAPHICS_API /;"	d
SFML_GRAPHICS_EXPORT_HPP	Graphics/Export.hpp	/^#define SFML_GRAPHICS_EXPORT_HPP$/;"	d
SFML_GRAPHICS_HPP	Graphics.hpp	/^#define SFML_GRAPHICS_HPP$/;"	d
SFML_HTTP_HPP	Network/Http.hpp	/^#define SFML_HTTP_HPP$/;"	d
SFML_IMAGE_HPP	Graphics/Image.hpp	/^#define SFML_IMAGE_HPP$/;"	d
SFML_INPUTSOUNDFILE_HPP	Audio/InputSoundFile.hpp	/^#define SFML_INPUTSOUNDFILE_HPP$/;"	d
SFML_INPUTSTREAM_HPP	System/InputStream.hpp	/^#define SFML_INPUTSTREAM_HPP$/;"	d
SFML_IPADDRESS_HPP	Network/IpAddress.hpp	/^#define SFML_IPADDRESS_HPP$/;"	d
SFML_JOYSTICK_HPP	Window/Joystick.hpp	/^#define SFML_JOYSTICK_HPP$/;"	d
SFML_KEYBOARD_HPP	Window/Keyboard.hpp	/^#define SFML_KEYBOARD_HPP$/;"	d
SFML_LISTENER_HPP	Audio/Listener.hpp	/^#define SFML_LISTENER_HPP$/;"	d
SFML_LOCK_HPP	System/Lock.hpp	/^#define SFML_LOCK_HPP$/;"	d
SFML_MAIN_HPP	Main.hpp	/^#define SFML_MAIN_HPP$/;"	d
SFML_MEMORYINPUTSTREAM_HPP	System/MemoryInputStream.hpp	/^#define SFML_MEMORYINPUTSTREAM_HPP$/;"	d
SFML_MOUSE_HPP	Window/Mouse.hpp	/^#define SFML_MOUSE_HPP$/;"	d
SFML_MUSIC_HPP	Audio/Music.hpp	/^#define SFML_MUSIC_HPP$/;"	d
SFML_MUTEX_HPP	System/Mutex.hpp	/^#define SFML_MUTEX_HPP$/;"	d
SFML_NATIVEACTIVITY_HPP	System/NativeActivity.hpp	/^#define SFML_NATIVEACTIVITY_HPP$/;"	d
SFML_NETWORK_API	Network/Export.hpp	/^    #define SFML_NETWORK_API /;"	d
SFML_NETWORK_EXPORT_HPP	Network/Export.hpp	/^#define SFML_NETWORK_EXPORT_HPP$/;"	d
SFML_NETWORK_HPP	Network.hpp	/^#define SFML_NETWORK_HPP$/;"	d
SFML_NONCOPYABLE_HPP	System/NonCopyable.hpp	/^#define SFML_NONCOPYABLE_HPP$/;"	d
SFML_OPENGL_HPP	OpenGL.hpp	/^#define SFML_OPENGL_HPP$/;"	d
SFML_OUTPUTSOUNDFILE_HPP	Audio/OutputSoundFile.hpp	/^#define SFML_OUTPUTSOUNDFILE_HPP$/;"	d
SFML_PACKET_HPP	Network/Packet.hpp	/^#define SFML_PACKET_HPP$/;"	d
SFML_PRIMITIVETYPE_HPP	Graphics/PrimitiveType.hpp	/^#define SFML_PRIMITIVETYPE_HPP$/;"	d
SFML_RECTANGLESHAPE_HPP	Graphics/RectangleShape.hpp	/^#define SFML_RECTANGLESHAPE_HPP$/;"	d
SFML_RECT_HPP	Graphics/Rect.hpp	/^#define SFML_RECT_HPP$/;"	d
SFML_RENDERSTATES_HPP	Graphics/RenderStates.hpp	/^#define SFML_RENDERSTATES_HPP$/;"	d
SFML_RENDERTARGET_HPP	Graphics/RenderTarget.hpp	/^#define SFML_RENDERTARGET_HPP$/;"	d
SFML_RENDERTEXTURE_HPP	Graphics/RenderTexture.hpp	/^#define SFML_RENDERTEXTURE_HPP$/;"	d
SFML_RENDERWINDOW_HPP	Graphics/RenderWindow.hpp	/^#define SFML_RENDERWINDOW_HPP$/;"	d
SFML_SENSOR_HPP	Window/Sensor.hpp	/^#define SFML_SENSOR_HPP$/;"	d
SFML_SFML_WINDOW_HPP	Window.hpp	/^#define SFML_SFML_WINDOW_HPP$/;"	d
SFML_SHADER_HPP	Graphics/Shader.hpp	/^#define SFML_SHADER_HPP$/;"	d
SFML_SHAPE_HPP	Graphics/Shape.hpp	/^#define SFML_SHAPE_HPP$/;"	d
SFML_SLEEP_HPP	System/Sleep.hpp	/^#define SFML_SLEEP_HPP$/;"	d
SFML_SOCKETHANDLE_HPP	Network/SocketHandle.hpp	/^#define SFML_SOCKETHANDLE_HPP$/;"	d
SFML_SOCKETSELECTOR_HPP	Network/SocketSelector.hpp	/^#define SFML_SOCKETSELECTOR_HPP$/;"	d
SFML_SOCKET_HPP	Network/Socket.hpp	/^#define SFML_SOCKET_HPP$/;"	d
SFML_SOUNDBUFFERRECORDER_HPP	Audio/SoundBufferRecorder.hpp	/^#define SFML_SOUNDBUFFERRECORDER_HPP$/;"	d
SFML_SOUNDBUFFER_HPP	Audio/SoundBuffer.hpp	/^#define SFML_SOUNDBUFFER_HPP$/;"	d
SFML_SOUNDFILEFACTORY_HPP	Audio/SoundFileFactory.hpp	/^#define SFML_SOUNDFILEFACTORY_HPP$/;"	d
SFML_SOUNDFILEREADER_HPP	Audio/SoundFileReader.hpp	/^#define SFML_SOUNDFILEREADER_HPP$/;"	d
SFML_SOUNDFILEWRITER_HPP	Audio/SoundFileWriter.hpp	/^#define SFML_SOUNDFILEWRITER_HPP$/;"	d
SFML_SOUNDRECORDER_HPP	Audio/SoundRecorder.hpp	/^#define SFML_SOUNDRECORDER_HPP$/;"	d
SFML_SOUNDSOURCE_HPP	Audio/SoundSource.hpp	/^#define SFML_SOUNDSOURCE_HPP$/;"	d
SFML_SOUNDSTREAM_HPP	Audio/SoundStream.hpp	/^#define SFML_SOUNDSTREAM_HPP$/;"	d
SFML_SOUND_HPP	Audio/Sound.hpp	/^#define SFML_SOUND_HPP$/;"	d
SFML_SPRITE_HPP	Graphics/Sprite.hpp	/^#define SFML_SPRITE_HPP$/;"	d
SFML_STRING_HPP	System/String.hpp	/^#define SFML_STRING_HPP$/;"	d
SFML_SYSTEM_ANDROID	Config.hpp	/^        #define SFML_SYSTEM_ANDROID$/;"	d
SFML_SYSTEM_API	System/Export.hpp	/^    #define SFML_SYSTEM_API /;"	d
SFML_SYSTEM_EXPORT_HPP	System/Export.hpp	/^#define SFML_SYSTEM_EXPORT_HPP$/;"	d
SFML_SYSTEM_FREEBSD	Config.hpp	/^        #define SFML_SYSTEM_FREEBSD$/;"	d
SFML_SYSTEM_HPP	System.hpp	/^#define SFML_SYSTEM_HPP$/;"	d
SFML_SYSTEM_IOS	Config.hpp	/^        #define SFML_SYSTEM_IOS$/;"	d
SFML_SYSTEM_LINUX	Config.hpp	/^        #define SFML_SYSTEM_LINUX$/;"	d
SFML_SYSTEM_MACOS	Config.hpp	/^        #define SFML_SYSTEM_MACOS$/;"	d
SFML_SYSTEM_OPENBSD	Config.hpp	/^        #define SFML_SYSTEM_OPENBSD$/;"	d
SFML_SYSTEM_WINDOWS	Config.hpp	/^    #define SFML_SYSTEM_WINDOWS$/;"	d
SFML_TCPLISTENER_HPP	Network/TcpListener.hpp	/^#define SFML_TCPLISTENER_HPP$/;"	d
SFML_TCPSOCKET_HPP	Network/TcpSocket.hpp	/^#define SFML_TCPSOCKET_HPP$/;"	d
SFML_TEXTURE_HPP	Graphics/Texture.hpp	/^#define SFML_TEXTURE_HPP$/;"	d
SFML_TEXT_HPP	Graphics/Text.hpp	/^#define SFML_TEXT_HPP$/;"	d
SFML_THREADLOCALPTR_HPP	System/ThreadLocalPtr.hpp	/^#define SFML_THREADLOCALPTR_HPP$/;"	d
SFML_THREADLOCAL_HPP	System/ThreadLocal.hpp	/^#define SFML_THREADLOCAL_HPP$/;"	d
SFML_THREAD_HPP	System/Thread.hpp	/^#define SFML_THREAD_HPP$/;"	d
SFML_TIME_HPP	System/Time.hpp	/^#define SFML_TIME_HPP$/;"	d
SFML_TOUCH_HPP	Window/Touch.hpp	/^#define SFML_TOUCH_HPP$/;"	d
SFML_TRANSFORMABLE_HPP	Graphics/Transformable.hpp	/^#define SFML_TRANSFORMABLE_HPP$/;"	d
SFML_TRANSFORM_HPP	Graphics/Transform.hpp	/^#define SFML_TRANSFORM_HPP$/;"	d
SFML_UDPSOCKET_HPP	Network/UdpSocket.hpp	/^#define SFML_UDPSOCKET_HPP$/;"	d
SFML_UTF_HPP	System/Utf.hpp	/^#define SFML_UTF_HPP$/;"	d
SFML_VECTOR2_HPP	System/Vector2.hpp	/^#define SFML_VECTOR2_HPP$/;"	d
SFML_VECTOR3_HPP	System/Vector3.hpp	/^#define SFML_VECTOR3_HPP$/;"	d
SFML_VERSION_MAJOR	Config.hpp	/^#define SFML_VERSION_MAJOR /;"	d
SFML_VERSION_MINOR	Config.hpp	/^#define SFML_VERSION_MINOR /;"	d
SFML_VERSION_PATCH	Config.hpp	/^#define SFML_VERSION_PATCH /;"	d
SFML_VERTEXARRAY_HPP	Graphics/VertexArray.hpp	/^#define SFML_VERTEXARRAY_HPP$/;"	d
SFML_VERTEXBUFFER_HPP	Graphics/VertexBuffer.hpp	/^#define SFML_VERTEXBUFFER_HPP$/;"	d
SFML_VERTEX_HPP	Graphics/Vertex.hpp	/^#define SFML_VERTEX_HPP$/;"	d
SFML_VIDEOMODE_HPP	Window/VideoMode.hpp	/^#define SFML_VIDEOMODE_HPP$/;"	d
SFML_VIEW_HPP	Graphics/View.hpp	/^#define SFML_VIEW_HPP$/;"	d
SFML_WINDOWHANDLE_HPP	Window/WindowHandle.hpp	/^#define SFML_WINDOWHANDLE_HPP$/;"	d
SFML_WINDOWSTYLE_HPP	Window/WindowStyle.hpp	/^#define SFML_WINDOWSTYLE_HPP$/;"	d
SFML_WINDOW_API	Window/Export.hpp	/^    #define SFML_WINDOW_API /;"	d
SFML_WINDOW_EXPORT_HPP	Window/Export.hpp	/^#define SFML_WINDOW_EXPORT_HPP$/;"	d
SFML_WINDOW_HPP	Window/Window.hpp	/^#define SFML_WINDOW_HPP$/;"	d
SemiColon	Window/Keyboard.hpp	/^        SemiColon = Semicolon,    \/\/\/< \\deprecated Use Semicolon instead$/;"	e	enum:sf::Keyboard::Key
Semicolon	Window/Keyboard.hpp	/^        Semicolon,    \/\/\/< The ; key$/;"	e	enum:sf::Keyboard::Key
Sensor	Window/Sensor.hpp	/^class SFML_WINDOW_API Sensor$/;"	c	namespace:sf
SensorChanged	Window/Event.hpp	/^        SensorChanged,          \/\/\/< A sensor value changed (data in event.sensor)$/;"	e	enum:sf::Event::EventType
SensorEvent	Window/Event.hpp	/^    struct SensorEvent$/;"	s	class:sf::Event
ServiceNotAvailable	Network/Http.hpp	/^            ServiceNotAvailable = 503, \/\/\/< The server is temporarily unavailable (overloaded/;"	e	enum:sf::Http::Response::Status
ServiceReady	Network/Ftp.hpp	/^            ServiceReady          = 220, \/\/\/< Service ready for new user$/;"	e	enum:sf::Ftp::Response::Status
ServiceReadySoon	Network/Ftp.hpp	/^            ServiceReadySoon            = 120, \/\/\/< Service ready in N minutes$/;"	e	enum:sf::Ftp::Response::Status
ServiceUnavailable	Network/Ftp.hpp	/^            ServiceUnavailable        = 421, \/\/\/< Service not available, closing control conn/;"	e	enum:sf::Ftp::Response::Status
Shader	Graphics/Shader.hpp	/^class SFML_GRAPHICS_API Shader : GlResource, NonCopyable$/;"	c	namespace:sf
Shape	Graphics/Shape.hpp	/^class SFML_GRAPHICS_API Shape : public Drawable, public Transformable$/;"	c	namespace:sf
Size	Network/TcpSocket.hpp	/^        Uint32            Size;         \/\/\/< Data of packet size$/;"	m	struct:sf::TcpSocket::PendingPacket	typeref:typename:Uint32
SizeAll	Window/Cursor.hpp	/^        SizeAll,                \/\/\/< Combination of SizeHorizontal and SizeVertical$/;"	e	enum:sf::Cursor::Type
SizeBottomLeftTopRight	Window/Cursor.hpp	/^        SizeBottomLeftTopRight, \/\/\/< Double arrow cursor going from bottom-left to top-right$/;"	e	enum:sf::Cursor::Type
SizeEvent	Window/Event.hpp	/^    struct SizeEvent$/;"	s	class:sf::Event
SizeHorizontal	Window/Cursor.hpp	/^        SizeHorizontal,         \/\/\/< Horizontal double arrow cursor$/;"	e	enum:sf::Cursor::Type
SizeReceived	Network/TcpSocket.hpp	/^        std::size_t       SizeReceived; \/\/\/< Number of size bytes received so far$/;"	m	struct:sf::TcpSocket::PendingPacket	typeref:typename:std::size_t
SizeTopLeftBottomRight	Window/Cursor.hpp	/^        SizeTopLeftBottomRight, \/\/\/< Double arrow cursor going from top-left to bottom-right$/;"	e	enum:sf::Cursor::Type
SizeVertical	Window/Cursor.hpp	/^        SizeVertical,           \/\/\/< Vertical double arrow cursor$/;"	e	enum:sf::Cursor::Type
Slash	Window/Keyboard.hpp	/^        Slash,        \/\/\/< The \/ key$/;"	e	enum:sf::Keyboard::Key
Socket	Network/Socket.hpp	/^class SFML_NETWORK_API Socket : NonCopyable$/;"	c	namespace:sf
SocketHandle	Network/SocketHandle.hpp	/^    typedef UINT_PTR SocketHandle;$/;"	t	namespace:sf	typeref:typename:UINT_PTR
SocketSelector	Network/SocketSelector.hpp	/^class SFML_NETWORK_API SocketSelector$/;"	c	namespace:sf
Sound	Audio/Sound.hpp	/^class SFML_AUDIO_API Sound : public SoundSource$/;"	c	namespace:sf
SoundBuffer	Audio/SoundBuffer.hpp	/^class SFML_AUDIO_API SoundBuffer : AlResource$/;"	c	namespace:sf
SoundBufferRecorder	Audio/SoundBufferRecorder.hpp	/^class SFML_AUDIO_API SoundBufferRecorder : public SoundRecorder$/;"	c	namespace:sf
SoundFileFactory	Audio/SoundFileFactory.hpp	/^class SFML_AUDIO_API SoundFileFactory$/;"	c	namespace:sf
SoundFileReader	Audio/SoundFileReader.hpp	/^class SFML_AUDIO_API SoundFileReader$/;"	c	namespace:sf
SoundFileWriter	Audio/SoundFileWriter.hpp	/^class SFML_AUDIO_API SoundFileWriter$/;"	c	namespace:sf
SoundList	Audio/SoundBuffer.hpp	/^    typedef std::set<Sound*> SoundList; \/\/\/< Set of unique sound instances$/;"	t	class:sf::SoundBuffer	typeref:typename:std::set<Sound * >
SoundRecorder	Audio/SoundRecorder.hpp	/^class SFML_AUDIO_API SoundRecorder : AlResource$/;"	c	namespace:sf
SoundSource	Audio/SoundSource.hpp	/^class SFML_AUDIO_API SoundSource : AlResource$/;"	c	namespace:sf
SoundStream	Audio/SoundStream.hpp	/^class SFML_AUDIO_API SoundStream : public SoundSource$/;"	c	namespace:sf
Space	Window/Keyboard.hpp	/^        Space,        \/\/\/< The Space key$/;"	e	enum:sf::Keyboard::Key
Span	Audio/Music.hpp	/^        Span()$/;"	f	struct:sf::Music::Span
Span	Audio/Music.hpp	/^        Span(T off, T len):$/;"	f	struct:sf::Music::Span
Span	Audio/Music.hpp	/^    struct Span$/;"	s	class:sf::Music
Sprite	Graphics/Sprite.hpp	/^class SFML_GRAPHICS_API Sprite : public Drawable, public Transformable$/;"	c	namespace:sf
SrcAlpha	Graphics/BlendMode.hpp	/^        SrcAlpha,         \/\/\/< (src.a, src.a, src.a, src.a)$/;"	e	enum:sf::BlendMode::Factor
SrcColor	Graphics/BlendMode.hpp	/^        SrcColor,         \/\/\/< (src.r, src.g, src.b, src.a)$/;"	e	enum:sf::BlendMode::Factor
StatesCache	Graphics/RenderTarget.hpp	/^    struct StatesCache$/;"	s	class:sf::RenderTarget
Static	Graphics/VertexBuffer.hpp	/^        Static   \/\/\/< Rarely changing data$/;"	e	enum:sf::VertexBuffer::Usage
Status	Audio/SoundSource.hpp	/^    enum Status$/;"	g	class:sf::SoundSource
Status	Network/Ftp.hpp	/^        enum Status$/;"	g	class:sf::Ftp::Response
Status	Network/Http.hpp	/^        enum Status$/;"	g	class:sf::Http::Response
Status	Network/Socket.hpp	/^    enum Status$/;"	g	class:sf::Socket
Stopped	Audio/SoundSource.hpp	/^        Stopped, \/\/\/< Sound is not playing$/;"	e	enum:sf::SoundSource::Status
Stream	Graphics/VertexBuffer.hpp	/^        Stream,  \/\/\/< Constantly changing data$/;"	e	enum:sf::VertexBuffer::Usage
StrikeThrough	Graphics/Text.hpp	/^        StrikeThrough = 1 << 3  \/\/\/< Strike through characters$/;"	e	enum:sf::Text::Style
String	System/String.hpp	/^class SFML_SYSTEM_API String$/;"	c	namespace:sf
Style	Graphics/Text.hpp	/^    enum Style$/;"	g	class:sf::Text
Style	Window/WindowStyle.hpp	/^namespace Style$/;"	n	namespace:sf
Subtract	Graphics/BlendMode.hpp	/^        Subtract,       \/\/\/< Pixel = Src * SrcFactor - Dst * DstFactor$/;"	e	enum:sf::BlendMode::Equation
Subtract	Window/Keyboard.hpp	/^        Subtract,     \/\/\/< The - key (minus, usually from numpad)$/;"	e	enum:sf::Keyboard::Key
SystemStatus	Network/Ftp.hpp	/^            SystemStatus          = 211, \/\/\/< System status, or system help reply$/;"	e	enum:sf::Ftp::Response::Status
SystemType	Network/Ftp.hpp	/^            SystemType            = 215, \/\/\/< NAME system type, where NAME is an official sys/;"	e	enum:sf::Ftp::Response::Status
T	Window/Keyboard.hpp	/^        T,            \/\/\/< The T key$/;"	e	enum:sf::Keyboard::Key
Tab	Window/Keyboard.hpp	/^        Tab,          \/\/\/< The Tabulation key$/;"	e	enum:sf::Keyboard::Key
Tcp	Network/Socket.hpp	/^        Tcp, \/\/\/< TCP protocol$/;"	e	enum:sf::Socket::Type
TcpListener	Network/TcpListener.hpp	/^class SFML_NETWORK_API TcpListener : public Socket$/;"	c	namespace:sf
TcpSocket	Network/TcpSocket.hpp	/^class SFML_NETWORK_API TcpSocket : public Socket$/;"	c	namespace:sf
Text	Graphics/Text.hpp	/^class SFML_GRAPHICS_API Text : public Drawable, public Transformable$/;"	c	namespace:sf
Text	Window/Cursor.hpp	/^        Text,                   \/\/\/< I-beam, cursor when hovering over a field allowing text /;"	e	enum:sf::Cursor::Type
TextEntered	Window/Event.hpp	/^        TextEntered,            \/\/\/< A character was entered (data in event.text)$/;"	e	enum:sf::Event::EventType
TextEvent	Window/Event.hpp	/^    struct TextEvent$/;"	s	class:sf::Event
Texture	Graphics/Texture.hpp	/^class SFML_GRAPHICS_API Texture : GlResource$/;"	c	namespace:sf
TextureTable	Graphics/Shader.hpp	/^    typedef std::map<int, const Texture*> TextureTable;$/;"	t	class:sf::Shader	typeref:typename:std::map<int,const Texture * >
Thread	System/Thread.hpp	/^class SFML_SYSTEM_API Thread : NonCopyable$/;"	c	namespace:sf
Thread	System/Thread.inl	/^Thread::Thread(F function, A argument) :$/;"	f	class:Thread
Thread	System/Thread.inl	/^Thread::Thread(F functor) :$/;"	f	class:Thread
Thread	System/Thread.inl	/^Thread::Thread(void(C::*function)(), C* object) :$/;"	f	class:Thread
ThreadFunc	System/Thread.inl	/^struct ThreadFunc$/;"	s	namespace:priv	file:
ThreadFunctor	System/Thread.inl	/^    ThreadFunctor(T functor) : m_functor(functor) {}$/;"	f	struct:priv::ThreadFunctor	file:
ThreadFunctor	System/Thread.inl	/^struct ThreadFunctor : ThreadFunc$/;"	s	namespace:priv	file:
ThreadFunctorWithArg	System/Thread.inl	/^    ThreadFunctorWithArg(F function, A arg) : m_function(function), m_arg(arg) {}$/;"	f	struct:priv::ThreadFunctorWithArg	file:
ThreadFunctorWithArg	System/Thread.inl	/^struct ThreadFunctorWithArg : ThreadFunc$/;"	s	namespace:priv	file:
ThreadLocal	System/ThreadLocal.hpp	/^class SFML_SYSTEM_API ThreadLocal : NonCopyable$/;"	c	namespace:sf
ThreadLocalPtr	System/ThreadLocalPtr.hpp	/^class ThreadLocalPtr : private ThreadLocal$/;"	c	namespace:sf
ThreadLocalPtr	System/ThreadLocalPtr.inl	/^ThreadLocalPtr<T>::ThreadLocalPtr(T* value) :$/;"	f	class:sf::ThreadLocalPtr
ThreadMemberFunc	System/Thread.inl	/^    ThreadMemberFunc(void(C::*function)(), C* object) : m_function(function), m_object(object) {/;"	f	struct:priv::ThreadMemberFunc	file:
ThreadMemberFunc	System/Thread.inl	/^struct ThreadMemberFunc : ThreadFunc$/;"	s	namespace:priv	file:
Tilde	Window/Keyboard.hpp	/^        Tilde,        \/\/\/< The ~ key$/;"	e	enum:sf::Keyboard::Key
Time	System/Time.hpp	/^class SFML_SYSTEM_API Time$/;"	c	namespace:sf
TimeSpan	Audio/Music.hpp	/^    typedef Span<Time> TimeSpan;$/;"	t	class:sf::Music	typeref:typename:Span<Time>
Titlebar	Window/WindowStyle.hpp	/^        Titlebar   = 1 << 0, \/\/\/< Title bar + fixed border$/;"	e	enum:sf::Style::__anon00fae70b0103
Touch	Window/Touch.hpp	/^class SFML_WINDOW_API Touch$/;"	c	namespace:sf
TouchBegan	Window/Event.hpp	/^        TouchBegan,             \/\/\/< A touch event began (data in event.touch)$/;"	e	enum:sf::Event::EventType
TouchEnded	Window/Event.hpp	/^        TouchEnded,             \/\/\/< A touch event ended (data in event.touch)$/;"	e	enum:sf::Event::EventType
TouchEvent	Window/Event.hpp	/^    struct TouchEvent$/;"	s	class:sf::Event
TouchMoved	Window/Event.hpp	/^        TouchMoved,             \/\/\/< A touch moved (data in event.touch)$/;"	e	enum:sf::Event::EventType
TransferAborted	Network/Ftp.hpp	/^            TransferAborted           = 426, \/\/\/< Connection closed, transfer aborted$/;"	e	enum:sf::Ftp::Response::Status
TransferMode	Network/Ftp.hpp	/^    enum TransferMode$/;"	g	class:sf::Ftp
Transform	Graphics/Transform.hpp	/^class SFML_GRAPHICS_API Transform$/;"	c	namespace:sf
Transformable	Graphics/Transformable.hpp	/^class SFML_GRAPHICS_API Transformable$/;"	c	namespace:sf
TransientContextLock	Window/GlResource.hpp	/^    class SFML_WINDOW_API TransientContextLock : NonCopyable$/;"	c	class:sf::GlResource
Transparent	Graphics/Color.hpp	/^    static const Color Transparent; \/\/\/< Transparent (black) predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
TriangleFan	Graphics/PrimitiveType.hpp	/^    TriangleFan,   \/\/\/< List of connected triangles, a point uses the common center and the p/;"	e	enum:sf::PrimitiveType
TriangleStrip	Graphics/PrimitiveType.hpp	/^    TriangleStrip, \/\/\/< List of connected triangles, a point uses the two previous points to /;"	e	enum:sf::PrimitiveType
Triangles	Graphics/PrimitiveType.hpp	/^    Triangles,     \/\/\/< List of individual triangles$/;"	e	enum:sf::PrimitiveType
TrianglesFan	Graphics/PrimitiveType.hpp	/^    TrianglesFan   = TriangleFan    \/\/\/< \\deprecated Use TriangleFan instead$/;"	e	enum:sf::PrimitiveType
TrianglesStrip	Graphics/PrimitiveType.hpp	/^    TrianglesStrip = TriangleStrip, \/\/\/< \\deprecated Use TriangleStrip instead$/;"	e	enum:sf::PrimitiveType
Type	Graphics/Shader.hpp	/^    enum Type$/;"	g	class:sf::Shader
Type	Network/Socket.hpp	/^    enum Type$/;"	g	class:sf::Socket
Type	Window/Cursor.hpp	/^    enum Type$/;"	g	class:sf::Cursor
Type	Window/Sensor.hpp	/^    enum Type$/;"	g	class:sf::Sensor
U	Window/Joystick.hpp	/^        U,    \/\/\/< The U axis$/;"	e	enum:sf::Joystick::Axis
U	Window/Keyboard.hpp	/^        U,            \/\/\/< The U key$/;"	e	enum:sf::Keyboard::Key
Udp	Network/Socket.hpp	/^        Udp  \/\/\/< UDP protocol$/;"	e	enum:sf::Socket::Type
UdpSocket	Network/UdpSocket.hpp	/^class SFML_NETWORK_API UdpSocket : public Socket$/;"	c	namespace:sf
Uint16	Config.hpp	/^    typedef unsigned short Uint16;$/;"	t	namespace:sf	typeref:typename:unsigned short
Uint32	Config.hpp	/^    typedef unsigned int Uint32;$/;"	t	namespace:sf	typeref:typename:unsigned int
Uint64	Config.hpp	/^        typedef unsigned __int64 Uint64;$/;"	t	namespace:sf	typeref:typename:unsigned __int64
Uint64	Config.hpp	/^        typedef unsigned long long Uint64;$/;"	t	namespace:sf	typeref:typename:unsigned long long
Uint8	Config.hpp	/^    typedef unsigned char Uint8;$/;"	t	namespace:sf	typeref:typename:unsigned char
Unauthorized	Network/Http.hpp	/^            Unauthorized        = 401, \/\/\/< The requested page needs an authentication to be /;"	e	enum:sf::Http::Response::Status
Underlined	Graphics/Text.hpp	/^        Underlined    = 1 << 2, \/\/\/< Underlined characters$/;"	e	enum:sf::Text::Style
UniformTable	Graphics/Shader.hpp	/^    typedef std::map<std::string, int> UniformTable;$/;"	t	class:sf::Shader	typeref:typename:std::map<std::string,int>
Unknown	Window/Keyboard.hpp	/^        Unknown = -1, \/\/\/< Unhandled key$/;"	e	enum:sf::Keyboard::Key
Up	Window/Keyboard.hpp	/^        Up,           \/\/\/< Up arrow$/;"	e	enum:sf::Keyboard::Key
Usage	Graphics/VertexBuffer.hpp	/^    enum Usage$/;"	g	class:sf::VertexBuffer
UserAcceleration	Window/Sensor.hpp	/^        UserAcceleration, \/\/\/< Measures the direction and intensity of device acceleration, i/;"	e	enum:sf::Sensor::Type
Utf	System/Utf.hpp	/^class Utf<16>$/;"	c	namespace:sf
Utf	System/Utf.hpp	/^class Utf<32>$/;"	c	namespace:sf
Utf	System/Utf.hpp	/^class Utf<8>$/;"	c	namespace:sf
Utf16	System/Utf.hpp	/^typedef Utf<16> Utf16;$/;"	t	namespace:sf	typeref:typename:Utf<16>
Utf32	System/Utf.hpp	/^typedef Utf<32> Utf32;$/;"	t	namespace:sf	typeref:typename:Utf<32>
Utf8	System/Utf.hpp	/^typedef Utf<8>  Utf8;$/;"	t	namespace:sf	typeref:typename:Utf<8>
V	Window/Joystick.hpp	/^        V,    \/\/\/< The V axis$/;"	e	enum:sf::Joystick::Axis
V	Window/Keyboard.hpp	/^        V,            \/\/\/< The V key$/;"	e	enum:sf::Keyboard::Key
Vec2	Graphics/Glsl.hpp	/^    typedef Vector2<float> Vec2;$/;"	t	namespace:sf::Glsl	typeref:typename:Vector2<float>
Vec3	Graphics/Glsl.hpp	/^    typedef Vector3<float> Vec3;$/;"	t	namespace:sf::Glsl	typeref:typename:Vector3<float>
Vec4	Graphics/Glsl.hpp	/^    typedef implementation-defined Vec4;$/;"	t	namespace:sf::Glsl	typeref:typename:implementation-defined
Vec4	Graphics/Glsl.hpp	/^    typedef priv::Vector4<float> Vec4;$/;"	t	namespace:sf::Glsl	typeref:typename:priv::Vector4<float>
Vector2	System/Vector2.hpp	/^class Vector2$/;"	c	namespace:sf
Vector2	System/Vector2.inl	/^inline Vector2<T>::Vector2() :$/;"	f	class:Vector2
Vector2	System/Vector2.inl	/^inline Vector2<T>::Vector2(T X, T Y) :$/;"	f	class:Vector2
Vector2	System/Vector2.inl	/^inline Vector2<T>::Vector2(const Vector2<U>& vector) :$/;"	f	class:Vector2
Vector2f	System/Vector2.hpp	/^typedef Vector2<float>        Vector2f;$/;"	t	namespace:sf	typeref:typename:Vector2<float>
Vector2i	System/Vector2.hpp	/^typedef Vector2<int>          Vector2i;$/;"	t	namespace:sf	typeref:typename:Vector2<int>
Vector2u	System/Vector2.hpp	/^typedef Vector2<unsigned int> Vector2u;$/;"	t	namespace:sf	typeref:typename:Vector2<unsigned int>
Vector3	System/Vector3.hpp	/^class Vector3$/;"	c	namespace:sf
Vector3	System/Vector3.inl	/^inline Vector3<T>::Vector3() :$/;"	f	class:Vector3
Vector3	System/Vector3.inl	/^inline Vector3<T>::Vector3(T X, T Y, T Z) :$/;"	f	class:Vector3
Vector3	System/Vector3.inl	/^inline Vector3<T>::Vector3(const Vector3<U>& vector) :$/;"	f	class:Vector3
Vector3f	System/Vector3.hpp	/^typedef Vector3<float> Vector3f;$/;"	t	namespace:sf	typeref:typename:Vector3<float>
Vector3i	System/Vector3.hpp	/^typedef Vector3<int>   Vector3i;$/;"	t	namespace:sf	typeref:typename:Vector3<int>
Vector4	Graphics/Glsl.inl	/^    Vector4() :$/;"	f	struct:Vector4	file:
Vector4	Graphics/Glsl.inl	/^    Vector4(T X, T Y, T Z, T W) :$/;"	f	struct:Vector4	file:
Vector4	Graphics/Glsl.inl	/^    Vector4(const Color& color)$/;"	f	struct:Vector4	file:
Vector4	Graphics/Glsl.inl	/^    explicit Vector4(const Vector4<U>& other) :$/;"	f	struct:Vector4	file:
Vector4	Graphics/Glsl.inl	/^struct Vector4$/;"	s	file:
VersionNotSupported	Network/Http.hpp	/^            VersionNotSupported = 505, \/\/\/< The server doesn't support the requested HTTP ver/;"	e	enum:sf::Http::Response::Status
Vertex	Graphics/Shader.hpp	/^        Vertex,   \/\/\/< %Vertex shader$/;"	e	enum:sf::Shader::Type
Vertex	Graphics/Vertex.hpp	/^class SFML_GRAPHICS_API Vertex$/;"	c	namespace:sf
VertexArray	Graphics/VertexArray.hpp	/^class SFML_GRAPHICS_API VertexArray : public Drawable$/;"	c	namespace:sf
VertexBuffer	Graphics/VertexBuffer.hpp	/^class SFML_GRAPHICS_API VertexBuffer : public Drawable, private GlResource$/;"	c	namespace:sf
VertexCacheSize	Graphics/RenderTarget.hpp	/^        enum {VertexCacheSize = 4};$/;"	e	enum:sf::RenderTarget::StatesCache::__anonb94469c20103
VerticalWheel	Window/Mouse.hpp	/^        VerticalWheel,  \/\/\/< The vertical mouse wheel$/;"	e	enum:sf::Mouse::Wheel
VideoMode	Window/VideoMode.hpp	/^class SFML_WINDOW_API VideoMode$/;"	c	namespace:sf
View	Graphics/View.hpp	/^class SFML_GRAPHICS_API View$/;"	c	namespace:sf
W	Window/Keyboard.hpp	/^        W,            \/\/\/< The W key$/;"	e	enum:sf::Keyboard::Key
Wait	Window/Cursor.hpp	/^        Wait,                   \/\/\/< Busy cursor$/;"	e	enum:sf::Cursor::Type
Wheel	Window/Mouse.hpp	/^    enum Wheel$/;"	g	class:sf::Mouse
White	Graphics/Color.hpp	/^    static const Color White;       \/\/\/< White predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
Window	Window/Window.hpp	/^class SFML_WINDOW_API Window : GlResource, NonCopyable$/;"	c	namespace:sf
WindowHandle	Window/WindowHandle.hpp	/^    typedef HWND__* WindowHandle;$/;"	t	namespace:sf	typeref:typename:HWND__ *
WriterFactory	Audio/SoundFileFactory.hpp	/^    struct WriterFactory$/;"	s	class:sf::SoundFileFactory
WriterFactoryArray	Audio/SoundFileFactory.hpp	/^    typedef std::vector<WriterFactory> WriterFactoryArray;$/;"	t	class:sf::SoundFileFactory	typeref:typename:std::vector<WriterFactory>
X	Window/Joystick.hpp	/^        X,    \/\/\/< The X axis$/;"	e	enum:sf::Joystick::Axis
X	Window/Keyboard.hpp	/^        X,            \/\/\/< The X key$/;"	e	enum:sf::Keyboard::Key
XButton1	Window/Mouse.hpp	/^        XButton1,   \/\/\/< The first extra mouse button$/;"	e	enum:sf::Mouse::Button
XButton2	Window/Mouse.hpp	/^        XButton2,   \/\/\/< The second extra mouse button$/;"	e	enum:sf::Mouse::Button
Y	Window/Joystick.hpp	/^        Y,    \/\/\/< The Y axis$/;"	e	enum:sf::Joystick::Axis
Y	Window/Keyboard.hpp	/^        Y,            \/\/\/< The Y key$/;"	e	enum:sf::Keyboard::Key
Yellow	Graphics/Color.hpp	/^    static const Color Yellow;      \/\/\/< Yellow predefined color$/;"	m	class:sf::Color	typeref:typename:const Color
Z	Window/Joystick.hpp	/^        Z,    \/\/\/< The Z axis$/;"	e	enum:sf::Joystick::Axis
Z	Window/Keyboard.hpp	/^        Z,            \/\/\/< The Z key$/;"	e	enum:sf::Keyboard::Key
Zero	Graphics/BlendMode.hpp	/^        Zero,             \/\/\/< (0, 0, 0, 0)$/;"	e	enum:sf::BlendMode::Factor
Zero	System/Time.hpp	/^    static const Time Zero; \/\/\/< Predefined "zero" time value$/;"	m	class:sf::Time	typeref:typename:const Time
__anon00fae70b0103	Window/WindowStyle.hpp	/^    {$/;"	g	namespace:sf::Style
__anon8208ed520103	Window/Joystick.hpp	/^    {$/;"	g	class:sf::Joystick
__anon86780f710103	Audio/SoundStream.hpp	/^    {$/;"	g	class:sf::SoundStream
__anon86780f710203	Audio/SoundStream.hpp	/^    {$/;"	g	class:sf::SoundStream
__anon91e3839d0103	Network/Socket.hpp	/^    {$/;"	g	class:sf::Socket
__anonb94469c20103	Graphics/RenderTarget.hpp	/^        enum {VertexCacheSize = 4};$/;"	g	struct:sf::RenderTarget::StatesCache
__anonc973a5060103	Network/UdpSocket.hpp	/^    {$/;"	g	class:sf::UdpSocket
__anonfbf05f04010a	Window/Event.hpp	/^    {$/;"	u	class:sf::Event
a	Graphics/Color.hpp	/^    Uint8 a; \/\/\/< Alpha (opacity) component$/;"	m	class:sf::Color	typeref:typename:Uint8
advance	Graphics/Glyph.hpp	/^    float     advance;     \/\/\/< Offset to move horizontally to the next character$/;"	m	class:sf::Glyph	typeref:typename:float
alphaDstFactor	Graphics/BlendMode.hpp	/^    Factor   alphaDstFactor; \/\/\/< Destination blending factor for the alpha channel$/;"	m	struct:sf::BlendMode	typeref:typename:Factor
alphaEquation	Graphics/BlendMode.hpp	/^    Equation alphaEquation;  \/\/\/< Blending equation for the alpha channel$/;"	m	struct:sf::BlendMode	typeref:typename:Equation
alphaSrcFactor	Graphics/BlendMode.hpp	/^    Factor   alphaSrcFactor; \/\/\/< Source blending factor for the alpha channel$/;"	m	struct:sf::BlendMode	typeref:typename:Factor
alt	Window/Event.hpp	/^        bool          alt;     \/\/\/< Is the Alt key pressed?$/;"	m	struct:sf::Event::KeyEvent	typeref:typename:bool
antialiasingLevel	Window/ContextSettings.hpp	/^    unsigned int antialiasingLevel; \/\/\/< Level of antialiasing$/;"	m	struct:sf::ContextSettings	typeref:typename:unsigned int
array	Graphics/Glsl.inl	/^    float array[Columns * Rows]; \/\/\/< Array holding matrix data$/;"	m	struct:Matrix	typeref:typename:float[]	file:
attributeFlags	Window/ContextSettings.hpp	/^    Uint32       attributeFlags;    \/\/\/< The attribute flags to create the context with$/;"	m	struct:sf::ContextSettings	typeref:typename:Uint32
axis	Window/Event.hpp	/^        Joystick::Axis axis;       \/\/\/< Axis on which the joystick moved$/;"	m	struct:sf::Event::JoystickMoveEvent	typeref:typename:Joystick::Axis
b	Graphics/Color.hpp	/^    Uint8 b; \/\/\/< Blue component$/;"	m	class:sf::Color	typeref:typename:Uint8
bitsPerPixel	Window/VideoMode.hpp	/^    unsigned int bitsPerPixel; \/\/\/< Video mode pixel depth, in bits per pixels$/;"	m	class:sf::VideoMode	typeref:typename:unsigned int
blendMode	Graphics/RenderStates.hpp	/^    BlendMode      blendMode; \/\/\/< Blending mode$/;"	m	class:sf::RenderStates	typeref:typename:BlendMode
bounds	Graphics/Glyph.hpp	/^    FloatRect bounds;      \/\/\/< Bounding rectangle of the glyph, in coordinates relative to t/;"	m	class:sf::Glyph	typeref:typename:FloatRect
button	Window/Event.hpp	/^        Mouse::Button button; \/\/\/< Code of the button that has been pressed$/;"	m	struct:sf::Event::MouseButtonEvent	typeref:typename:Mouse::Button
button	Window/Event.hpp	/^        unsigned int button;     \/\/\/< Index of the button that has been pressed (in range [0 /;"	m	struct:sf::Event::JoystickButtonEvent	typeref:typename:unsigned int
channelCount	Audio/SoundFileReader.hpp	/^        unsigned int channelCount; \/\/\/< Number of channels of the sound$/;"	m	struct:sf::SoundFileReader::Info	typeref:typename:unsigned int
check	Audio/SoundFileFactory.hpp	/^        bool (*check)(InputStream&);$/;"	m	struct:sf::SoundFileFactory::ReaderFactory	typeref:typename:bool (*)(InputStream &)
check	Audio/SoundFileFactory.hpp	/^        bool (*check)(const std::string&);$/;"	m	struct:sf::SoundFileFactory::WriterFactory	typeref:typename:bool (*)(const std::string &)
code	Window/Event.hpp	/^        Keyboard::Key code;    \/\/\/< Code of the key that has been pressed$/;"	m	struct:sf::Event::KeyEvent	typeref:typename:Keyboard::Key
color	Graphics/Vertex.hpp	/^    Color     color;     \/\/\/< Color of the vertex$/;"	m	class:sf::Vertex	typeref:typename:Color
colorDstFactor	Graphics/BlendMode.hpp	/^    Factor   colorDstFactor; \/\/\/< Destination blending factor for the color channels$/;"	m	struct:sf::BlendMode	typeref:typename:Factor
colorEquation	Graphics/BlendMode.hpp	/^    Equation colorEquation;  \/\/\/< Blending equation for the color channels$/;"	m	struct:sf::BlendMode	typeref:typename:Equation
colorSrcFactor	Graphics/BlendMode.hpp	/^    Factor   colorSrcFactor; \/\/\/< Source blending factor for the color channels$/;"	m	struct:sf::BlendMode	typeref:typename:Factor
contains	Graphics/Rect.inl	/^bool Rect<T>::contains(T x, T y) const$/;"	f	class:Rect	typeref:typename:bool
contains	Graphics/Rect.inl	/^bool Rect<T>::contains(const Vector2<T>& point) const$/;"	f	class:Rect	typeref:typename:bool
control	Window/Event.hpp	/^        bool          control; \/\/\/< Is the Control key pressed?$/;"	m	struct:sf::Event::KeyEvent	typeref:typename:bool
count	System/Utf.inl	/^std::size_t Utf<16>::count(In begin, In end)$/;"	f	class:Utf	typeref:typename:std::size_t
count	System/Utf.inl	/^std::size_t Utf<32>::count(In begin, In end)$/;"	f	class:Utf	typeref:typename:std::size_t
count	System/Utf.inl	/^std::size_t Utf<8>::count(In begin, In end)$/;"	f	class:Utf	typeref:typename:std::size_t
create	Audio/SoundFileFactory.hpp	/^        SoundFileReader* (*create)();$/;"	m	struct:sf::SoundFileFactory::ReaderFactory	typeref:typename:SoundFileReader * (*)()
create	Audio/SoundFileFactory.hpp	/^        SoundFileWriter* (*create)();$/;"	m	struct:sf::SoundFileFactory::WriterFactory	typeref:typename:SoundFileWriter * (*)()
createReader	Audio/SoundFileFactory.inl	/^    template <typename T> SoundFileReader* createReader() {return new T;}$/;"	f	namespace:sf::priv	typeref:typename:SoundFileReader *
createWriter	Audio/SoundFileFactory.inl	/^    template <typename T> SoundFileWriter* createWriter() {return new T;}$/;"	f	namespace:sf::priv	typeref:typename:SoundFileWriter *
decode	System/Utf.inl	/^In Utf<16>::decode(In begin, In end, Uint32& output, Uint32 replacement)$/;"	f	class:Utf	typeref:typename:In
decode	System/Utf.inl	/^In Utf<32>::decode(In begin, In \/*end*\/, Uint32& output, Uint32 \/*replacement*\/)$/;"	f	class:Utf	typeref:typename:In
decode	System/Utf.inl	/^In Utf<8>::decode(In begin, In end, Uint32& output, Uint32 replacement)$/;"	f	class:Utf	typeref:typename:In
decodeAnsi	System/Utf.inl	/^Uint32 Utf<32>::decodeAnsi(In input, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Uint32
decodeWide	System/Utf.inl	/^Uint32 Utf<32>::decodeWide(In input)$/;"	f	class:Utf	typeref:typename:Uint32
delta	Window/Event.hpp	/^        float        delta; \/\/\/< Wheel offset (positive is up\/left, negative is down\/right)/;"	m	struct:sf::Event::MouseWheelScrollEvent	typeref:typename:float
delta	Window/Event.hpp	/^        int delta; \/\/\/< Number of ticks the wheel has moved (positive is up, negative is down/;"	m	struct:sf::Event::MouseWheelEvent	typeref:typename:int
depthBits	Window/ContextSettings.hpp	/^    unsigned int depthBits;         \/\/\/< Bits of the depth buffer$/;"	m	struct:sf::ContextSettings	typeref:typename:unsigned int
enable	Graphics/RenderTarget.hpp	/^        bool      enable;         \/\/\/< Is the cache enabled?$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:bool
encode	System/Utf.inl	/^Out Utf<16>::encode(Uint32 input, Out output, Uint16 replacement)$/;"	f	class:Utf	typeref:typename:Out
encode	System/Utf.inl	/^Out Utf<32>::encode(Uint32 input, Out output, Uint32 \/*replacement*\/)$/;"	f	class:Utf	typeref:typename:Out
encode	System/Utf.inl	/^Out Utf<8>::encode(Uint32 input, Out output, Uint8 replacement)$/;"	f	class:Utf	typeref:typename:Out
encodeAnsi	System/Utf.inl	/^Out Utf<32>::encodeAnsi(Uint32 codepoint, Out output, char replacement, const std::locale& local/;"	f	class:Utf	typeref:typename:Out
encodeWide	System/Utf.inl	/^Out Utf<32>::encodeWide(Uint32 codepoint, Out output, wchar_t replacement)$/;"	f	class:Utf	typeref:typename:Out
family	Graphics/Font.hpp	/^        std::string family; \/\/\/< The font family$/;"	m	struct:sf::Font::Info	typeref:typename:std::string
finger	Window/Event.hpp	/^        unsigned int finger; \/\/\/< Index of the finger in case of multi-touch events$/;"	m	struct:sf::Event::TouchEvent	typeref:typename:unsigned int
fromAnsi	System/Utf.inl	/^Out Utf<16>::fromAnsi(In begin, In end, Out output, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
fromAnsi	System/Utf.inl	/^Out Utf<32>::fromAnsi(In begin, In end, Out output, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
fromAnsi	System/Utf.inl	/^Out Utf<8>::fromAnsi(In begin, In end, Out output, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
fromLatin1	System/Utf.inl	/^Out Utf<16>::fromLatin1(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromLatin1	System/Utf.inl	/^Out Utf<32>::fromLatin1(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromLatin1	System/Utf.inl	/^Out Utf<8>::fromLatin1(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromUtf16	System/String.inl	/^String String::fromUtf16(T begin, T end)$/;"	f	class:String	typeref:typename:String
fromUtf32	System/String.inl	/^String String::fromUtf32(T begin, T end)$/;"	f	class:String	typeref:typename:String
fromUtf8	System/String.inl	/^String String::fromUtf8(T begin, T end)$/;"	f	class:String	typeref:typename:String
fromWide	System/Utf.inl	/^Out Utf<16>::fromWide(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromWide	System/Utf.inl	/^Out Utf<32>::fromWide(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
fromWide	System/Utf.inl	/^Out Utf<8>::fromWide(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
g	Graphics/Color.hpp	/^    Uint8 g; \/\/\/< Green component$/;"	m	class:sf::Color	typeref:typename:Uint8
glStatesSet	Graphics/RenderTarget.hpp	/^        bool      glStatesSet;    \/\/\/< Are our internal GL states set yet?$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:bool
glyphs	Graphics/Font.hpp	/^        GlyphTable       glyphs;  \/\/\/< Table mapping code points to their corresponding glyph$/;"	m	struct:sf::Font::Page	typeref:typename:GlyphTable
height	Graphics/Font.hpp	/^        unsigned int height; \/\/\/< Height of the row$/;"	m	struct:sf::Font::Row	typeref:typename:unsigned int
height	Graphics/Rect.hpp	/^    T height; \/\/\/< Height of the rectangle$/;"	m	class:sf::Rect	typeref:typename:T
height	Window/Event.hpp	/^        unsigned int height; \/\/\/< New height, in pixels$/;"	m	struct:sf::Event::SizeEvent	typeref:typename:unsigned int
height	Window/VideoMode.hpp	/^    unsigned int height;       \/\/\/< Video mode height, in pixels$/;"	m	class:sf::VideoMode	typeref:typename:unsigned int
intersects	Graphics/Rect.inl	/^bool Rect<T>::intersects(const Rect<T>& rectangle) const$/;"	f	class:Rect	typeref:typename:bool
intersects	Graphics/Rect.inl	/^bool Rect<T>::intersects(const Rect<T>& rectangle, Rect<T>& intersection) const$/;"	f	class:Rect	typeref:typename:bool
joystickButton	Window/Event.hpp	/^        JoystickButtonEvent   joystickButton;    \/\/\/< Joystick button event parameters (Event/;"	m	union:sf::Event::__anonfbf05f04010a	typeref:typename:JoystickButtonEvent
joystickConnect	Window/Event.hpp	/^        JoystickConnectEvent  joystickConnect;   \/\/\/< Joystick (dis)connect event parameters /;"	m	union:sf::Event::__anonfbf05f04010a	typeref:typename:JoystickConnectEvent
joystickId	Window/Event.hpp	/^        unsigned int   joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count/;"	m	struct:sf::Event::JoystickMoveEvent	typeref:typename:unsigned int
joystickId	Window/Event.hpp	/^        unsigned int joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count -/;"	m	struct:sf::Event::JoystickButtonEvent	typeref:typename:unsigned int
joystickId	Window/Event.hpp	/^        unsigned int joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count -/;"	m	struct:sf::Event::JoystickConnectEvent	typeref:typename:unsigned int
joystickMove	Window/Event.hpp	/^        JoystickMoveEvent     joystickMove;      \/\/\/< Joystick move event parameters (Event::/;"	m	union:sf::Event::__anonfbf05f04010a	typeref:typename:JoystickMoveEvent
key	Window/Event.hpp	/^        KeyEvent              key;               \/\/\/< Key event parameters (Event::KeyPressed/;"	m	union:sf::Event::__anonfbf05f04010a	typeref:typename:KeyEvent
lastBlendMode	Graphics/RenderTarget.hpp	/^        BlendMode lastBlendMode;  \/\/\/< Cached blending mode$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:BlendMode
lastTextureId	Graphics/RenderTarget.hpp	/^        Uint64    lastTextureId;  \/\/\/< Cached texture$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:Uint64
left	Graphics/Rect.hpp	/^    T left;   \/\/\/< Left coordinate of the rectangle$/;"	m	class:sf::Rect	typeref:typename:T
length	Audio/Music.hpp	/^        T length; \/\/\/< The length of the time range$/;"	m	struct:sf::Music::Span	typeref:typename:T
m_actualSize	Graphics/Texture.hpp	/^    Vector2u     m_actualSize;    \/\/\/< Actual texture size (can be greater than public size b/;"	m	class:sf::Texture	typeref:typename:Vector2u
m_address	Network/IpAddress.hpp	/^    Uint32 m_address; \/\/\/< Address stored as an unsigned 32 bits integer$/;"	m	class:sf::IpAddress	typeref:typename:Uint32
m_arg	System/Thread.inl	/^    A m_arg;$/;"	m	struct:priv::ThreadFunctorWithArg	typeref:typename:A	file:
m_body	Network/Http.hpp	/^        std::string  m_body;         \/\/\/< Body of the request$/;"	m	class:sf::Http::Request	typeref:typename:std::string
m_body	Network/Http.hpp	/^        std::string  m_body;         \/\/\/< Body of the response$/;"	m	class:sf::Http::Response	typeref:typename:std::string
m_bounds	Graphics/Shape.hpp	/^    FloatRect      m_bounds;           \/\/\/< Bounding rectangle of the whole shape (outline + /;"	m	class:sf::Shape	typeref:typename:FloatRect
m_bounds	Graphics/Text.hpp	/^    mutable FloatRect   m_bounds;              \/\/\/< Bounding rectangle of the text (in local /;"	m	class:sf::Text	typeref:typename:FloatRect
m_buffer	Audio/Sound.hpp	/^    const SoundBuffer* m_buffer; \/\/\/< Sound buffer bound to the source$/;"	m	class:sf::Sound	typeref:typename:const SoundBuffer *
m_buffer	Audio/SoundBuffer.hpp	/^    unsigned int       m_buffer;   \/\/\/< OpenAL buffer identifier$/;"	m	class:sf::SoundBuffer	typeref:typename:unsigned int
m_buffer	Audio/SoundBufferRecorder.hpp	/^    SoundBuffer        m_buffer;  \/\/\/< Sound buffer that will contain the recorded data$/;"	m	class:sf::SoundBufferRecorder	typeref:typename:SoundBuffer
m_buffer	Graphics/VertexBuffer.hpp	/^    unsigned int  m_buffer;        \/\/\/< Internal buffer identifier$/;"	m	class:sf::VertexBuffer	typeref:typename:unsigned int
m_buffer	Network/UdpSocket.hpp	/^    std::vector<char> m_buffer; \/\/\/< Temporary buffer holding the received data in Receive(Pa/;"	m	class:sf::UdpSocket	typeref:typename:std::vector<char>
m_bufferSeeks	Audio/SoundStream.hpp	/^    Int64         m_bufferSeeks[BufferCount]; \/\/\/< If buffer is an "end buffer", holds next s/;"	m	class:sf::SoundStream	typeref:typename:Int64[]
m_buffers	Audio/SoundStream.hpp	/^    unsigned int  m_buffers[BufferCount];     \/\/\/< Sound buffers used to store temporary audi/;"	m	class:sf::SoundStream	typeref:typename:unsigned int[]
m_cache	Graphics/RenderTarget.hpp	/^    StatesCache m_cache;       \/\/\/< Render states cache$/;"	m	class:sf::RenderTarget	typeref:typename:StatesCache
m_cacheId	Graphics/Texture.hpp	/^    Uint64       m_cacheId;       \/\/\/< Unique number that identifies the texture to the rende/;"	m	class:sf::Texture	typeref:typename:Uint64
m_center	Graphics/View.hpp	/^    Vector2f          m_center;              \/\/\/< Center of the view, in scene coordinates$/;"	m	class:sf::View	typeref:typename:Vector2f
m_channelCount	Audio/InputSoundFile.hpp	/^    unsigned int     m_channelCount; \/\/\/< Number of channels of the sound$/;"	m	class:sf::InputSoundFile	typeref:typename:unsigned int
m_channelCount	Audio/SoundRecorder.hpp	/^    unsigned int       m_channelCount;       \/\/\/< Number of recording channels$/;"	m	class:sf::SoundRecorder	typeref:typename:unsigned int
m_channelCount	Audio/SoundStream.hpp	/^    unsigned int  m_channelCount;             \/\/\/< Number of channels (1 = mono, 2 = stereo, /;"	m	class:sf::SoundStream	typeref:typename:unsigned int
m_characterSize	Graphics/Text.hpp	/^    unsigned int        m_characterSize;       \/\/\/< Base size of characters, in pixels$/;"	m	class:sf::Text	typeref:typename:unsigned int
m_clock	Window/Window.hpp	/^    Clock             m_clock;          \/\/\/< Clock for measuring the elapsed time between fra/;"	m	class:sf::Window	typeref:typename:Clock
m_commandSocket	Network/Ftp.hpp	/^    TcpSocket   m_commandSocket; \/\/\/< Socket holding the control connection with the server$/;"	m	class:sf::Ftp	typeref:typename:TcpSocket
m_connection	Network/Http.hpp	/^    TcpSocket      m_connection; \/\/\/< Connection to the host$/;"	m	class:sf::Http	typeref:typename:TcpSocket
m_context	Window/Context.hpp	/^    priv::GlContext* m_context; \/\/\/< Internal OpenGL context$/;"	m	class:sf::Context	typeref:typename:priv::GlContext *
m_context	Window/Window.hpp	/^    priv::GlContext*  m_context;        \/\/\/< Platform-specific implementation of the OpenGL c/;"	m	class:sf::Window	typeref:typename:priv::GlContext *
m_currentTexture	Graphics/Shader.hpp	/^    int          m_currentTexture; \/\/\/< Location of the current texture in the shader$/;"	m	class:sf::Shader	typeref:typename:int
m_data	Network/Packet.hpp	/^    std::vector<char> m_data;    \/\/\/< Data stored in the packet$/;"	m	class:sf::Packet	typeref:typename:std::vector<char>
m_data	System/MemoryInputStream.hpp	/^    const char* m_data;   \/\/\/< Pointer to the data in memory$/;"	m	class:sf::MemoryInputStream	typeref:typename:const char *
m_defaultView	Graphics/RenderTarget.hpp	/^    View        m_defaultView; \/\/\/< Default view$/;"	m	class:sf::RenderTarget	typeref:typename:View
m_deviceName	Audio/SoundRecorder.hpp	/^    std::string        m_deviceName;         \/\/\/< Name of the audio capture device$/;"	m	class:sf::SoundRecorder	typeref:typename:std::string
m_directory	Network/Ftp.hpp	/^        std::string m_directory; \/\/\/< Directory extracted from the response message$/;"	m	class:sf::Ftp::DirectoryResponse	typeref:typename:std::string
m_duration	Audio/SoundBuffer.hpp	/^    Time               m_duration; \/\/\/< Sound duration$/;"	m	class:sf::SoundBuffer	typeref:typename:Time
m_entryPoint	System/Thread.hpp	/^    priv::ThreadFunc* m_entryPoint; \/\/\/< Abstraction of the function to run$/;"	m	class:sf::Thread	typeref:typename:priv::ThreadFunc *
m_face	Graphics/Font.hpp	/^    void*                      m_face;        \/\/\/< Pointer to the internal font face (it is t/;"	m	class:sf::Font	typeref:typename:void *
m_fboAttachment	Graphics/Texture.hpp	/^    bool         m_fboAttachment; \/\/\/< Is this texture owned by a framebuffer object?$/;"	m	class:sf::Texture	typeref:typename:bool
m_fields	Network/Http.hpp	/^        FieldTable   m_fields;       \/\/\/< Fields of the header associated to their value$/;"	m	class:sf::Http::Request	typeref:typename:FieldTable
m_fields	Network/Http.hpp	/^        FieldTable   m_fields;       \/\/\/< Fields of the header$/;"	m	class:sf::Http::Response	typeref:typename:FieldTable
m_file	Audio/Music.hpp	/^    InputSoundFile     m_file;     \/\/\/< The streamed music file$/;"	m	class:sf::Music	typeref:typename:InputSoundFile
m_file	System/FileInputStream.hpp	/^    priv::ResourceStream* m_file;$/;"	m	class:sf::FileInputStream	typeref:typename:priv::ResourceStream *
m_fillColor	Graphics/Shape.hpp	/^    Color          m_fillColor;        \/\/\/< Fill color$/;"	m	class:sf::Shape	typeref:typename:Color
m_fillColor	Graphics/Text.hpp	/^    Color               m_fillColor;           \/\/\/< Text fill color$/;"	m	class:sf::Text	typeref:typename:Color
m_font	Graphics/Text.hpp	/^    const Font*         m_font;                \/\/\/< Font used to display the string$/;"	m	class:sf::Text	typeref:typename:const Font *
m_fontTextureId	Graphics/Text.hpp	/^    mutable Uint64      m_fontTextureId;       \/\/\/< The font texture id$/;"	m	class:sf::Text	typeref:typename:Uint64
m_format	Audio/SoundStream.hpp	/^    Uint32        m_format;                   \/\/\/< Format of the internal sound buffers$/;"	m	class:sf::SoundStream	typeref:typename:Uint32
m_frameTimeLimit	Window/Window.hpp	/^    Time              m_frameTimeLimit; \/\/\/< Current framerate limit$/;"	m	class:sf::Window	typeref:typename:Time
m_function	System/Thread.inl	/^    F m_function;$/;"	m	struct:priv::ThreadFunctorWithArg	typeref:typename:F	file:
m_function	System/Thread.inl	/^    void(C::*m_function)();$/;"	m	struct:priv::ThreadMemberFunc	typeref:typename:void (C::*)()	file:
m_functor	System/Thread.inl	/^    T m_functor;$/;"	m	struct:priv::ThreadFunctor	typeref:typename:T	file:
m_geometryNeedUpdate	Graphics/Text.hpp	/^    mutable bool        m_geometryNeedUpdate;  \/\/\/< Does the geometry need to be recomputed?$/;"	m	class:sf::Text	typeref:typename:bool
m_hasMipmap	Graphics/Texture.hpp	/^    bool         m_hasMipmap;     \/\/\/< Has the mipmap been generated?$/;"	m	class:sf::Texture	typeref:typename:bool
m_host	Network/Http.hpp	/^    IpAddress      m_host;       \/\/\/< Web host address$/;"	m	class:sf::Http	typeref:typename:IpAddress
m_hostName	Network/Http.hpp	/^    std::string    m_hostName;   \/\/\/< Web host name$/;"	m	class:sf::Http	typeref:typename:std::string
m_id	Graphics/RenderTarget.hpp	/^    Uint64      m_id;          \/\/\/< Unique number that identifies the RenderTarget$/;"	m	class:sf::RenderTarget	typeref:typename:Uint64
m_impl	Graphics/RenderTexture.hpp	/^    priv::RenderTextureImpl* m_impl;    \/\/\/< Platform\/hardware specific implementation$/;"	m	class:sf::RenderTexture	typeref:typename:priv::RenderTextureImpl *
m_impl	Network/SocketSelector.hpp	/^    SocketSelectorImpl* m_impl; \/\/\/< Opaque pointer to the implementation (which requires OS-/;"	m	class:sf::SocketSelector	typeref:typename:SocketSelectorImpl *
m_impl	System/Thread.hpp	/^    priv::ThreadImpl* m_impl;       \/\/\/< OS-specific implementation of the thread$/;"	m	class:sf::Thread	typeref:typename:priv::ThreadImpl *
m_impl	System/ThreadLocal.hpp	/^    priv::ThreadLocalImpl* m_impl; \/\/\/< Pointer to the OS specific implementation$/;"	m	class:sf::ThreadLocal	typeref:typename:priv::ThreadLocalImpl *
m_impl	Window/Cursor.hpp	/^    priv::CursorImpl* m_impl; \/\/\/< Platform-specific implementation of the cursor$/;"	m	class:sf::Cursor	typeref:typename:priv::CursorImpl *
m_impl	Window/Window.hpp	/^    priv::WindowImpl* m_impl;           \/\/\/< Platform-specific implementation of the window$/;"	m	class:sf::Window	typeref:typename:priv::WindowImpl *
m_info	Graphics/Font.hpp	/^    Info                       m_info;        \/\/\/< Information about the font$/;"	m	class:sf::Font	typeref:typename:Info
m_insideBounds	Graphics/Shape.hpp	/^    FloatRect      m_insideBounds;     \/\/\/< Bounding rectangle of the inside (fill)$/;"	m	class:sf::Shape	typeref:typename:FloatRect
m_invTransformUpdated	Graphics/View.hpp	/^    mutable bool      m_invTransformUpdated; \/\/\/< Internal state telling if the inverse trans/;"	m	class:sf::View	typeref:typename:bool
m_inverseTransform	Graphics/Transformable.hpp	/^    mutable Transform m_inverseTransform;           \/\/\/< Combined transformation of the objec/;"	m	class:sf::Transformable	typeref:typename:Transform
m_inverseTransform	Graphics/View.hpp	/^    mutable Transform m_inverseTransform;    \/\/\/< Precomputed inverse projection transform co/;"	m	class:sf::View	typeref:typename:Transform
m_inverseTransformNeedUpdate	Graphics/Transformable.hpp	/^    mutable bool      m_inverseTransformNeedUpdate; \/\/\/< Does the transform need to be recomp/;"	m	class:sf::Transformable	typeref:typename:bool
m_isBlocking	Network/Socket.hpp	/^    bool         m_isBlocking; \/\/\/< Current blocking mode of the socket$/;"	m	class:sf::Socket	typeref:typename:bool
m_isCapturing	Audio/SoundRecorder.hpp	/^    bool               m_isCapturing;        \/\/\/< Capturing state$/;"	m	class:sf::SoundRecorder	typeref:typename:bool
m_isRepeated	Graphics/Texture.hpp	/^    bool         m_isRepeated;    \/\/\/< Is the texture in repeat mode?$/;"	m	class:sf::Texture	typeref:typename:bool
m_isSmooth	Graphics/Texture.hpp	/^    bool         m_isSmooth;      \/\/\/< Status of the smooth filter$/;"	m	class:sf::Texture	typeref:typename:bool
m_isStreaming	Audio/SoundStream.hpp	/^    bool          m_isStreaming;              \/\/\/< Streaming state (true = playing, false = s/;"	m	class:sf::SoundStream	typeref:typename:bool
m_isValid	Network/Packet.hpp	/^    bool              m_isValid; \/\/\/< Reading state of the packet$/;"	m	class:sf::Packet	typeref:typename:bool
m_letterSpacingFactor	Graphics/Text.hpp	/^    float               m_letterSpacingFactor; \/\/\/< Spacing factor between letters$/;"	m	class:sf::Text	typeref:typename:float
m_library	Graphics/Font.hpp	/^    void*                      m_library;     \/\/\/< Pointer to the internal library interface /;"	m	class:sf::Font	typeref:typename:void *
m_lineSpacingFactor	Graphics/Text.hpp	/^    float               m_lineSpacingFactor;   \/\/\/< Spacing factor between lines$/;"	m	class:sf::Text	typeref:typename:float
m_listing	Network/Ftp.hpp	/^        std::vector<std::string> m_listing; \/\/\/< Directory\/file names extracted from the dat/;"	m	class:sf::Ftp::ListingResponse	typeref:typename:std::vector<std::string>
m_loop	Audio/SoundStream.hpp	/^    bool          m_loop;                     \/\/\/< Loop flag (true to loop, false to play onc/;"	m	class:sf::SoundStream	typeref:typename:bool
m_loopSpan	Audio/Music.hpp	/^    Span<Uint64>       m_loopSpan; \/\/\/< Loop Range Specifier$/;"	m	class:sf::Music	typeref:typename:Span<Uint64>
m_majorVersion	Network/Http.hpp	/^        unsigned int m_majorVersion; \/\/\/< Major HTTP version$/;"	m	class:sf::Http::Request	typeref:typename:unsigned int
m_majorVersion	Network/Http.hpp	/^        unsigned int m_majorVersion; \/\/\/< Major HTTP version$/;"	m	class:sf::Http::Response	typeref:typename:unsigned int
m_matrix	Graphics/Transform.hpp	/^    float m_matrix[16]; \/\/\/< 4x4 matrix defining the transformation$/;"	m	class:sf::Transform	typeref:typename:float[16]
m_message	Network/Ftp.hpp	/^        std::string m_message; \/\/\/< Last message received from the server$/;"	m	class:sf::Ftp::Response	typeref:typename:std::string
m_method	Network/Http.hpp	/^        Method       m_method;       \/\/\/< Method to use for the request$/;"	m	class:sf::Http::Request	typeref:typename:Method
m_microseconds	System/Time.hpp	/^    Int64 m_microseconds; \/\/\/< Time value stored as microseconds$/;"	m	class:sf::Time	typeref:typename:Int64
m_minorVersion	Network/Http.hpp	/^        unsigned int m_minorVersion; \/\/\/< Minor HTTP version$/;"	m	class:sf::Http::Request	typeref:typename:unsigned int
m_minorVersion	Network/Http.hpp	/^        unsigned int m_minorVersion; \/\/\/< Minor HTTP version$/;"	m	class:sf::Http::Response	typeref:typename:unsigned int
m_mutex	Audio/Music.hpp	/^    Mutex              m_mutex;    \/\/\/< Mutex protecting the data$/;"	m	class:sf::Music	typeref:typename:Mutex
m_mutex	System/Lock.hpp	/^    Mutex& m_mutex; \/\/\/< Mutex to lock \/ unlock$/;"	m	class:sf::Lock	typeref:typename:Mutex &
m_mutexImpl	System/Mutex.hpp	/^    priv::MutexImpl* m_mutexImpl; \/\/\/< OS-specific implementation$/;"	m	class:sf::Mutex	typeref:typename:priv::MutexImpl *
m_object	System/Thread.inl	/^    C* m_object;$/;"	m	struct:priv::ThreadMemberFunc	typeref:typename:C *	file:
m_offset	System/MemoryInputStream.hpp	/^    Int64       m_offset; \/\/\/< Current reading position$/;"	m	class:sf::MemoryInputStream	typeref:typename:Int64
m_origin	Graphics/Transformable.hpp	/^    Vector2f          m_origin;                     \/\/\/< Origin of translation\/rotation\/sca/;"	m	class:sf::Transformable	typeref:typename:Vector2f
m_outlineColor	Graphics/Shape.hpp	/^    Color          m_outlineColor;     \/\/\/< Outline color$/;"	m	class:sf::Shape	typeref:typename:Color
m_outlineColor	Graphics/Text.hpp	/^    Color               m_outlineColor;        \/\/\/< Text outline color$/;"	m	class:sf::Text	typeref:typename:Color
m_outlineThickness	Graphics/Shape.hpp	/^    float          m_outlineThickness; \/\/\/< Thickness of the shape's outline$/;"	m	class:sf::Shape	typeref:typename:float
m_outlineThickness	Graphics/Text.hpp	/^    float               m_outlineThickness;    \/\/\/< Thickness of the text's outline$/;"	m	class:sf::Text	typeref:typename:float
m_outlineVertices	Graphics/Shape.hpp	/^    VertexArray    m_outlineVertices;  \/\/\/< Vertex array containing the outline geometry$/;"	m	class:sf::Shape	typeref:typename:VertexArray
m_outlineVertices	Graphics/Text.hpp	/^    mutable VertexArray m_outlineVertices;     \/\/\/< Vertex array containing the outline geome/;"	m	class:sf::Text	typeref:typename:VertexArray
m_pages	Graphics/Font.hpp	/^    mutable PageTable          m_pages;       \/\/\/< Table containing the glyphs pages by chara/;"	m	class:sf::Font	typeref:typename:PageTable
m_pendingPacket	Network/TcpSocket.hpp	/^    PendingPacket m_pendingPacket; \/\/\/< Temporary data of the packet currently being received$/;"	m	class:sf::TcpSocket	typeref:typename:PendingPacket
m_pixelBuffer	Graphics/Font.hpp	/^    mutable std::vector<Uint8> m_pixelBuffer; \/\/\/< Pixel buffer holding a glyph's pixels befo/;"	m	class:sf::Font	typeref:typename:std::vector<Uint8>
m_pixels	Graphics/Image.hpp	/^    std::vector<Uint8> m_pixels; \/\/\/< Pixels of the image$/;"	m	class:sf::Image	typeref:typename:std::vector<Uint8>
m_pixelsFlipped	Graphics/Texture.hpp	/^    mutable bool m_pixelsFlipped; \/\/\/< To work around the inconsistency in Y orientation$/;"	m	class:sf::Texture	typeref:typename:bool
m_pointCount	Graphics/CircleShape.hpp	/^    std::size_t m_pointCount; \/\/\/< Number of points composing the circle$/;"	m	class:sf::CircleShape	typeref:typename:std::size_t
m_points	Graphics/ConvexShape.hpp	/^    std::vector<Vector2f> m_points; \/\/\/< Points composing the convex polygon$/;"	m	class:sf::ConvexShape	typeref:typename:std::vector<Vector2f>
m_port	Network/Http.hpp	/^    unsigned short m_port;       \/\/\/< Port used for connection with host$/;"	m	class:sf::Http	typeref:typename:unsigned short
m_position	Graphics/Transformable.hpp	/^    Vector2f          m_position;                   \/\/\/< Position of the object in the 2D wor/;"	m	class:sf::Transformable	typeref:typename:Vector2f
m_primitiveType	Graphics/VertexArray.hpp	/^    PrimitiveType       m_primitiveType; \/\/\/< Type of primitives to draw$/;"	m	class:sf::VertexArray	typeref:typename:PrimitiveType
m_primitiveType	Graphics/VertexBuffer.hpp	/^    PrimitiveType m_primitiveType; \/\/\/< Type of primitives to draw$/;"	m	class:sf::VertexBuffer	typeref:typename:PrimitiveType
m_processingInterval	Audio/SoundRecorder.hpp	/^    Time               m_processingInterval; \/\/\/< Time period between calls to onProcessSampl/;"	m	class:sf::SoundRecorder	typeref:typename:Time
m_radius	Graphics/CircleShape.hpp	/^    float       m_radius;     \/\/\/< Radius of the circle$/;"	m	class:sf::CircleShape	typeref:typename:float
m_readPos	Network/Packet.hpp	/^    std::size_t       m_readPos; \/\/\/< Current reading position in the packet$/;"	m	class:sf::Packet	typeref:typename:std::size_t
m_reader	Audio/InputSoundFile.hpp	/^    SoundFileReader* m_reader;       \/\/\/< Reader that handles I\/O on the file's format$/;"	m	class:sf::InputSoundFile	typeref:typename:SoundFileReader *
m_receiveBuffer	Network/Ftp.hpp	/^    std::string m_receiveBuffer; \/\/\/< Received command data that is yet to be processed$/;"	m	class:sf::Ftp	typeref:typename:std::string
m_refCount	Graphics/Font.hpp	/^    int*                       m_refCount;    \/\/\/< Reference counter used by implicit sharing$/;"	m	class:sf::Font	typeref:typename:int *
m_rotation	Graphics/Transformable.hpp	/^    float             m_rotation;                   \/\/\/< Orientation of the object, in degree/;"	m	class:sf::Transformable	typeref:typename:float
m_rotation	Graphics/View.hpp	/^    float             m_rotation;            \/\/\/< Angle of rotation of the view rectangle, in/;"	m	class:sf::View	typeref:typename:float
m_sRgb	Graphics/Texture.hpp	/^    bool         m_sRgb;          \/\/\/< Should the texture source be converted from sRGB?$/;"	m	class:sf::Texture	typeref:typename:bool
m_sampleCount	Audio/InputSoundFile.hpp	/^    Uint64           m_sampleCount;  \/\/\/< Total number of samples in the file$/;"	m	class:sf::InputSoundFile	typeref:typename:Uint64
m_sampleOffset	Audio/InputSoundFile.hpp	/^    Uint64           m_sampleOffset; \/\/\/< Sample Read Position$/;"	m	class:sf::InputSoundFile	typeref:typename:Uint64
m_sampleRate	Audio/InputSoundFile.hpp	/^    unsigned int     m_sampleRate;   \/\/\/< Number of samples per second$/;"	m	class:sf::InputSoundFile	typeref:typename:unsigned int
m_sampleRate	Audio/SoundRecorder.hpp	/^    unsigned int       m_sampleRate;         \/\/\/< Sample rate$/;"	m	class:sf::SoundRecorder	typeref:typename:unsigned int
m_sampleRate	Audio/SoundStream.hpp	/^    unsigned int  m_sampleRate;               \/\/\/< Frequency (samples \/ second)$/;"	m	class:sf::SoundStream	typeref:typename:unsigned int
m_samples	Audio/Music.hpp	/^    std::vector<Int16> m_samples;  \/\/\/< Temporary buffer of samples$/;"	m	class:sf::Music	typeref:typename:std::vector<Int16>
m_samples	Audio/SoundBuffer.hpp	/^    std::vector<Int16> m_samples;  \/\/\/< Samples buffer$/;"	m	class:sf::SoundBuffer	typeref:typename:std::vector<Int16>
m_samples	Audio/SoundBufferRecorder.hpp	/^    std::vector<Int16> m_samples; \/\/\/< Temporary sample buffer to hold the recorded data$/;"	m	class:sf::SoundBufferRecorder	typeref:typename:std::vector<Int16>
m_samples	Audio/SoundRecorder.hpp	/^    std::vector<Int16> m_samples;            \/\/\/< Buffer to store captured samples$/;"	m	class:sf::SoundRecorder	typeref:typename:std::vector<Int16>
m_samplesProcessed	Audio/SoundStream.hpp	/^    Uint64        m_samplesProcessed;         \/\/\/< Number of buffers processed since beginnin/;"	m	class:sf::SoundStream	typeref:typename:Uint64
m_scale	Graphics/Transformable.hpp	/^    Vector2f          m_scale;                      \/\/\/< Scale of the object$/;"	m	class:sf::Transformable	typeref:typename:Vector2f
m_sendPos	Network/Packet.hpp	/^    std::size_t       m_sendPos; \/\/\/< Current send position in the packet (for handling parti/;"	m	class:sf::Packet	typeref:typename:std::size_t
m_shaderProgram	Graphics/Shader.hpp	/^    unsigned int m_shaderProgram;  \/\/\/< OpenGL identifier for the program$/;"	m	class:sf::Shader	typeref:typename:unsigned int
m_size	Graphics/Image.hpp	/^    Vector2u           m_size;   \/\/\/< Image size$/;"	m	class:sf::Image	typeref:typename:Vector2u
m_size	Graphics/RectangleShape.hpp	/^    Vector2f m_size; \/\/\/< Size of the rectangle$/;"	m	class:sf::RectangleShape	typeref:typename:Vector2f
m_size	Graphics/Texture.hpp	/^    Vector2u     m_size;          \/\/\/< Public texture size$/;"	m	class:sf::Texture	typeref:typename:Vector2u
m_size	Graphics/VertexBuffer.hpp	/^    std::size_t   m_size;          \/\/\/< Size in Vertexes of the currently allocated buffer$/;"	m	class:sf::VertexBuffer	typeref:typename:std::size_t
m_size	Graphics/View.hpp	/^    Vector2f          m_size;                \/\/\/< Size of the view, in scene coordinates$/;"	m	class:sf::View	typeref:typename:Vector2f
m_size	System/MemoryInputStream.hpp	/^    Int64       m_size;   \/\/\/< Total size of the data$/;"	m	class:sf::MemoryInputStream	typeref:typename:Int64
m_size	Window/Window.hpp	/^    Vector2u          m_size;           \/\/\/< Current size of the window$/;"	m	class:sf::Window	typeref:typename:Vector2u
m_socket	Network/Socket.hpp	/^    SocketHandle m_socket;     \/\/\/< Socket descriptor$/;"	m	class:sf::Socket	typeref:typename:SocketHandle
m_sounds	Audio/SoundBuffer.hpp	/^    mutable SoundList  m_sounds;   \/\/\/< List of sounds that are using this buffer$/;"	m	class:sf::SoundBuffer	typeref:typename:SoundList
m_source	Audio/SoundSource.hpp	/^    unsigned int m_source; \/\/\/< OpenAL source identifier$/;"	m	class:sf::SoundSource	typeref:typename:unsigned int
m_startTime	System/Clock.hpp	/^    Time m_startTime; \/\/\/< Time of last reset, in microseconds$/;"	m	class:sf::Clock	typeref:typename:Time
m_status	Network/Ftp.hpp	/^        Status      m_status;  \/\/\/< Status code returned from the server$/;"	m	class:sf::Ftp::Response	typeref:typename:Status
m_status	Network/Http.hpp	/^        Status       m_status;       \/\/\/< Status code$/;"	m	class:sf::Http::Response	typeref:typename:Status
m_stream	Audio/InputSoundFile.hpp	/^    InputStream*     m_stream;       \/\/\/< Input stream used to access the file's data$/;"	m	class:sf::InputSoundFile	typeref:typename:InputStream *
m_stream	Graphics/Font.hpp	/^    void*                      m_stream; \/\/\/< Asset file streamer (if loaded from file)$/;"	m	class:sf::Font	typeref:typename:void *
m_streamOwned	Audio/InputSoundFile.hpp	/^    bool             m_streamOwned;  \/\/\/< Is the stream internal or external?$/;"	m	class:sf::InputSoundFile	typeref:typename:bool
m_streamRec	Graphics/Font.hpp	/^    void*                      m_streamRec;   \/\/\/< Pointer to the stream rec instance (it is /;"	m	class:sf::Font	typeref:typename:void *
m_string	Graphics/Text.hpp	/^    String              m_string;              \/\/\/< String to display$/;"	m	class:sf::Text	typeref:typename:String
m_string	System/String.hpp	/^    std::basic_string<Uint32> m_string; \/\/\/< Internal string of UTF-32 characters$/;"	m	class:sf::String	typeref:typename:std::basic_string<Uint32>
m_stroker	Graphics/Font.hpp	/^    void*                      m_stroker;     \/\/\/< Pointer to the stroker (it is typeless to /;"	m	class:sf::Font	typeref:typename:void *
m_style	Graphics/Text.hpp	/^    Uint32              m_style;               \/\/\/< Text style (see Style enum)$/;"	m	class:sf::Text	typeref:typename:Uint32
m_texture	Graphics/RenderTexture.hpp	/^    Texture                  m_texture; \/\/\/< Target texture to draw on$/;"	m	class:sf::RenderTexture	typeref:typename:Texture
m_texture	Graphics/Shape.hpp	/^    const Texture* m_texture;          \/\/\/< Texture of the shape$/;"	m	class:sf::Shape	typeref:typename:const Texture *
m_texture	Graphics/Sprite.hpp	/^    const Texture* m_texture;     \/\/\/< Texture of the sprite$/;"	m	class:sf::Sprite	typeref:typename:const Texture *
m_texture	Graphics/Texture.hpp	/^    unsigned int m_texture;       \/\/\/< Internal texture identifier$/;"	m	class:sf::Texture	typeref:typename:unsigned int
m_textureRect	Graphics/Shape.hpp	/^    IntRect        m_textureRect;      \/\/\/< Rectangle defining the area of the source texture/;"	m	class:sf::Shape	typeref:typename:IntRect
m_textureRect	Graphics/Sprite.hpp	/^    IntRect        m_textureRect; \/\/\/< Rectangle defining the area of the source texture to d/;"	m	class:sf::Sprite	typeref:typename:IntRect
m_textures	Graphics/Shader.hpp	/^    TextureTable m_textures;       \/\/\/< Texture variables in the shader, mapped to their loca/;"	m	class:sf::Shader	typeref:typename:TextureTable
m_thread	Audio/SoundRecorder.hpp	/^    Thread             m_thread;             \/\/\/< Thread running the background recording tas/;"	m	class:sf::SoundRecorder	typeref:typename:Thread
m_thread	Audio/SoundStream.hpp	/^    Thread        m_thread;                   \/\/\/< Thread running the background tasks$/;"	m	class:sf::SoundStream	typeref:typename:Thread
m_threadMutex	Audio/SoundStream.hpp	/^    mutable Mutex m_threadMutex;              \/\/\/< Thread mutex$/;"	m	class:sf::SoundStream	typeref:typename:Mutex
m_threadStartState	Audio/SoundStream.hpp	/^    Status        m_threadStartState;         \/\/\/< State the thread starts in (Playing, Pause/;"	m	class:sf::SoundStream	typeref:typename:Status
m_transform	Graphics/Transformable.hpp	/^    mutable Transform m_transform;                  \/\/\/< Combined transformation of the objec/;"	m	class:sf::Transformable	typeref:typename:Transform
m_transform	Graphics/View.hpp	/^    mutable Transform m_transform;           \/\/\/< Precomputed projection transform correspond/;"	m	class:sf::View	typeref:typename:Transform
m_transformNeedUpdate	Graphics/Transformable.hpp	/^    mutable bool      m_transformNeedUpdate;        \/\/\/< Does the transform need to be recomp/;"	m	class:sf::Transformable	typeref:typename:bool
m_transformUpdated	Graphics/View.hpp	/^    mutable bool      m_transformUpdated;    \/\/\/< Internal state telling if the transform nee/;"	m	class:sf::View	typeref:typename:bool
m_type	Network/Socket.hpp	/^    Type         m_type;       \/\/\/< Type of the socket (TCP or UDP)$/;"	m	class:sf::Socket	typeref:typename:Type
m_uniforms	Graphics/Shader.hpp	/^    UniformTable m_uniforms;       \/\/\/< Parameters location cache$/;"	m	class:sf::Shader	typeref:typename:UniformTable
m_uri	Network/Http.hpp	/^        std::string  m_uri;          \/\/\/< Target URI of the request$/;"	m	class:sf::Http::Request	typeref:typename:std::string
m_usage	Graphics/VertexBuffer.hpp	/^    Usage         m_usage;         \/\/\/< How this vertex buffer is to be used$/;"	m	class:sf::VertexBuffer	typeref:typename:Usage
m_valid	Network/IpAddress.hpp	/^    bool   m_valid;   \/\/\/< Is the address valid?$/;"	m	class:sf::IpAddress	typeref:typename:bool
m_vertices	Graphics/Shape.hpp	/^    VertexArray    m_vertices;         \/\/\/< Vertex array containing the fill geometry$/;"	m	class:sf::Shape	typeref:typename:VertexArray
m_vertices	Graphics/Sprite.hpp	/^    Vertex         m_vertices[4]; \/\/\/< Vertices defining the sprite's geometry$/;"	m	class:sf::Sprite	typeref:typename:Vertex[4]
m_vertices	Graphics/Text.hpp	/^    mutable VertexArray m_vertices;            \/\/\/< Vertex array containing the fill geometry$/;"	m	class:sf::Text	typeref:typename:VertexArray
m_vertices	Graphics/VertexArray.hpp	/^    std::vector<Vertex> m_vertices;      \/\/\/< Vertices contained in the array$/;"	m	class:sf::VertexArray	typeref:typename:std::vector<Vertex>
m_view	Graphics/RenderTarget.hpp	/^    View        m_view;        \/\/\/< Current view$/;"	m	class:sf::RenderTarget	typeref:typename:View
m_viewport	Graphics/View.hpp	/^    FloatRect         m_viewport;            \/\/\/< Viewport rectangle, expressed as a factor o/;"	m	class:sf::View	typeref:typename:FloatRect
m_writer	Audio/OutputSoundFile.hpp	/^    SoundFileWriter* m_writer; \/\/\/< Writer that handles I\/O on the file's format$/;"	m	class:sf::OutputSoundFile	typeref:typename:SoundFileWriter *
main	Main.hpp	/^    #define main /;"	d
majorVersion	Window/ContextSettings.hpp	/^    unsigned int majorVersion;      \/\/\/< Major number of the context version to create$/;"	m	struct:sf::ContextSettings	typeref:typename:unsigned int
minorVersion	Window/ContextSettings.hpp	/^    unsigned int minorVersion;      \/\/\/< Minor number of the context version to create$/;"	m	struct:sf::ContextSettings	typeref:typename:unsigned int
mouseButton	Window/Event.hpp	/^        MouseButtonEvent      mouseButton;       \/\/\/< Mouse button event parameters (Event::M/;"	m	union:sf::Event::__anonfbf05f04010a	typeref:typename:MouseButtonEvent
mouseMove	Window/Event.hpp	/^        MouseMoveEvent        mouseMove;         \/\/\/< Mouse move event parameters (Event::Mou/;"	m	union:sf::Event::__anonfbf05f04010a	typeref:typename:MouseMoveEvent
mouseWheel	Window/Event.hpp	/^        MouseWheelEvent       mouseWheel;        \/\/\/< Mouse wheel event parameters (Event::Mo/;"	m	union:sf::Event::__anonfbf05f04010a	typeref:typename:MouseWheelEvent
mouseWheelScroll	Window/Event.hpp	/^        MouseWheelScrollEvent mouseWheelScroll;  \/\/\/< Mouse wheel event parameters (Event::Mo/;"	m	union:sf::Event::__anonfbf05f04010a	typeref:typename:MouseWheelScrollEvent
name	Window/Joystick.hpp	/^        String       name;      \/\/\/< Name of the joystick$/;"	m	struct:sf::Joystick::Identification	typeref:typename:String
next	System/Utf.inl	/^In Utf<16>::next(In begin, In end)$/;"	f	class:Utf	typeref:typename:In
next	System/Utf.inl	/^In Utf<32>::next(In begin, In \/*end*\/)$/;"	f	class:Utf	typeref:typename:In
next	System/Utf.inl	/^In Utf<8>::next(In begin, In end)$/;"	f	class:Utf	typeref:typename:In
nextRow	Graphics/Font.hpp	/^        unsigned int     nextRow; \/\/\/< Y position of the next new row in the texture$/;"	m	struct:sf::Font::Page	typeref:typename:unsigned int
offset	Audio/Music.hpp	/^        T offset; \/\/\/< The beginning offset of the time range$/;"	m	struct:sf::Music::Span	typeref:typename:T
operator !=	Graphics/Rect.inl	/^inline bool operator !=(const Rect<T>& left, const Rect<T>& right)$/;"	f	typeref:typename:bool
operator !=	System/Vector2.inl	/^inline bool operator !=(const Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:bool
operator !=	System/Vector3.inl	/^inline bool operator !=(const Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:bool
operator *	System/ThreadLocalPtr.inl	/^T& ThreadLocalPtr<T>::operator *() const$/;"	f	class:sf::ThreadLocalPtr	typeref:typename:T &
operator *	System/Vector2.inl	/^inline Vector2<T> operator *(T left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T>
operator *	System/Vector2.inl	/^inline Vector2<T> operator *(const Vector2<T>& left, T right)$/;"	f	typeref:typename:Vector2<T>
operator *	System/Vector3.inl	/^inline Vector3<T> operator *(T left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T>
operator *	System/Vector3.inl	/^inline Vector3<T> operator *(const Vector3<T>& left, T right)$/;"	f	typeref:typename:Vector3<T>
operator *=	System/Vector2.inl	/^inline Vector2<T>& operator *=(Vector2<T>& left, T right)$/;"	f	typeref:typename:Vector2<T> &
operator *=	System/Vector3.inl	/^inline Vector3<T>& operator *=(Vector3<T>& left, T right)$/;"	f	typeref:typename:Vector3<T> &
operator +	System/Vector2.inl	/^inline Vector2<T> operator +(const Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T>
operator +	System/Vector3.inl	/^inline Vector3<T> operator +(const Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T>
operator +=	System/Vector2.inl	/^inline Vector2<T>& operator +=(Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T> &
operator +=	System/Vector3.inl	/^inline Vector3<T>& operator +=(Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T> &
operator -	System/Vector2.inl	/^inline Vector2<T> operator -(const Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T>
operator -	System/Vector2.inl	/^inline Vector2<T> operator -(const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T>
operator -	System/Vector3.inl	/^inline Vector3<T> operator -(const Vector3<T>& left)$/;"	f	typeref:typename:Vector3<T>
operator -	System/Vector3.inl	/^inline Vector3<T> operator -(const Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T>
operator -=	System/Vector2.inl	/^inline Vector2<T>& operator -=(Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:Vector2<T> &
operator -=	System/Vector3.inl	/^inline Vector3<T>& operator -=(Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:Vector3<T> &
operator ->	System/ThreadLocalPtr.inl	/^T* ThreadLocalPtr<T>::operator ->() const$/;"	f	class:sf::ThreadLocalPtr	typeref:typename:T *
operator /	System/Vector2.inl	/^inline Vector2<T> operator \/(const Vector2<T>& left, T right)$/;"	f	typeref:typename:Vector2<T>
operator /	System/Vector3.inl	/^inline Vector3<T> operator \/(const Vector3<T>& left, T right)$/;"	f	typeref:typename:Vector3<T>
operator /=	System/Vector2.inl	/^inline Vector2<T>& operator \/=(Vector2<T>& left, T right)$/;"	f	typeref:typename:Vector2<T> &
operator /=	System/Vector3.inl	/^inline Vector3<T>& operator \/=(Vector3<T>& left, T right)$/;"	f	typeref:typename:Vector3<T> &
operator =	System/ThreadLocalPtr.inl	/^ThreadLocalPtr<T>& ThreadLocalPtr<T>::operator =(T* value)$/;"	f	class:sf::ThreadLocalPtr	typeref:typename:ThreadLocalPtr<T> &
operator =	System/ThreadLocalPtr.inl	/^ThreadLocalPtr<T>& ThreadLocalPtr<T>::operator =(const ThreadLocalPtr<T>& right)$/;"	f	class:sf::ThreadLocalPtr	typeref:typename:ThreadLocalPtr<T> &
operator ==	Graphics/Rect.inl	/^inline bool operator ==(const Rect<T>& left, const Rect<T>& right)$/;"	f	typeref:typename:bool
operator ==	System/Vector2.inl	/^inline bool operator ==(const Vector2<T>& left, const Vector2<T>& right)$/;"	f	typeref:typename:bool
operator ==	System/Vector3.inl	/^inline bool operator ==(const Vector3<T>& left, const Vector3<T>& right)$/;"	f	typeref:typename:bool
operator T*	System/ThreadLocalPtr.inl	/^ThreadLocalPtr<T>::operator T*() const$/;"	f	class:sf::ThreadLocalPtr
position	Graphics/Vertex.hpp	/^    Vector2f  position;  \/\/\/< 2D position of the vertex$/;"	m	class:sf::Vertex	typeref:typename:Vector2f
position	Window/Event.hpp	/^        float          position;   \/\/\/< New position on the axis (in range [-100 .. 100])$/;"	m	struct:sf::Event::JoystickMoveEvent	typeref:typename:float
priv	Audio/SoundFileFactory.inl	/^namespace priv$/;"	n	namespace:sf	file:
priv	Graphics/Glsl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	Graphics/RenderTexture.hpp	/^namespace priv$/;"	n	namespace:sf
priv	System/FileInputStream.hpp	/^namespace priv$/;"	n	namespace:sf
priv	System/Mutex.hpp	/^namespace priv$/;"	n	namespace:sf
priv	System/Thread.hpp	/^namespace priv$/;"	n	namespace:sf
priv	System/Thread.inl	/^namespace priv$/;"	n	file:
priv	System/ThreadLocal.hpp	/^namespace priv$/;"	n	namespace:sf
priv	Window/Context.hpp	/^namespace priv$/;"	n	namespace:sf
priv	Window/Cursor.hpp	/^namespace priv$/;"	n	namespace:sf
priv	Window/Window.hpp	/^namespace priv$/;"	n	namespace:sf
productId	Window/Joystick.hpp	/^        unsigned int productId; \/\/\/< Product identifier$/;"	m	struct:sf::Joystick::Identification	typeref:typename:unsigned int
r	Graphics/Color.hpp	/^    Uint8 r; \/\/\/< Red component$/;"	m	class:sf::Color	typeref:typename:Uint8
registerReader	Audio/SoundFileFactory.inl	/^void SoundFileFactory::registerReader()$/;"	f	class:sf::SoundFileFactory	typeref:typename:void
registerWriter	Audio/SoundFileFactory.inl	/^void SoundFileFactory::registerWriter()$/;"	f	class:sf::SoundFileFactory	typeref:typename:void
rows	Graphics/Font.hpp	/^        std::vector<Row> rows;    \/\/\/< List containing the position of all the existing rows$/;"	m	struct:sf::Font::Page	typeref:typename:std::vector<Row>
run	System/Thread.inl	/^    virtual void run() {(m_object->*m_function)();}$/;"	f	struct:priv::ThreadMemberFunc	typeref:typename:void	file:
run	System/Thread.inl	/^    virtual void run() {m_function(m_arg);}$/;"	f	struct:priv::ThreadFunctorWithArg	typeref:typename:void	file:
run	System/Thread.inl	/^    virtual void run() {m_functor();}$/;"	f	struct:priv::ThreadFunctor	typeref:typename:void	file:
sRgbCapable	Window/ContextSettings.hpp	/^    bool         sRgbCapable;       \/\/\/< Whether the context framebuffer is sRGB capable$/;"	m	struct:sf::ContextSettings	typeref:typename:bool
s_readers	Audio/SoundFileFactory.hpp	/^    static ReaderFactoryArray s_readers; \/\/\/< List of all registered readers$/;"	m	class:sf::SoundFileFactory	typeref:typename:ReaderFactoryArray
s_writers	Audio/SoundFileFactory.hpp	/^    static WriterFactoryArray s_writers; \/\/\/< List of all registered writers$/;"	m	class:sf::SoundFileFactory	typeref:typename:WriterFactoryArray
sampleCount	Audio/SoundFileReader.hpp	/^        Uint64       sampleCount;  \/\/\/< Total number of samples in the file$/;"	m	struct:sf::SoundFileReader::Info	typeref:typename:Uint64
sampleCount	Audio/SoundStream.hpp	/^        std::size_t  sampleCount; \/\/\/< Number of samples pointed by Samples$/;"	m	struct:sf::SoundStream::Chunk	typeref:typename:std::size_t
sampleRate	Audio/SoundFileReader.hpp	/^        unsigned int sampleRate;   \/\/\/< Samples rate of the sound, in samples per second$/;"	m	struct:sf::SoundFileReader::Info	typeref:typename:unsigned int
samples	Audio/SoundStream.hpp	/^        const Int16* samples;     \/\/\/< Pointer to the audio samples$/;"	m	struct:sf::SoundStream::Chunk	typeref:typename:const Int16 *
sensor	Window/Event.hpp	/^        SensorEvent           sensor;            \/\/\/< Sensor event parameters (Event::SensorC/;"	m	union:sf::Event::__anonfbf05f04010a	typeref:typename:SensorEvent
sf	Audio/AlResource.hpp	/^namespace sf$/;"	n
sf	Audio/InputSoundFile.hpp	/^namespace sf$/;"	n
sf	Audio/Listener.hpp	/^namespace sf$/;"	n
sf	Audio/Music.hpp	/^namespace sf$/;"	n
sf	Audio/OutputSoundFile.hpp	/^namespace sf$/;"	n
sf	Audio/Sound.hpp	/^namespace sf$/;"	n
sf	Audio/SoundBuffer.hpp	/^namespace sf$/;"	n
sf	Audio/SoundBufferRecorder.hpp	/^namespace sf$/;"	n
sf	Audio/SoundFileFactory.hpp	/^namespace sf$/;"	n
sf	Audio/SoundFileFactory.inl	/^namespace sf$/;"	n	file:
sf	Audio/SoundFileReader.hpp	/^namespace sf$/;"	n
sf	Audio/SoundFileWriter.hpp	/^namespace sf$/;"	n
sf	Audio/SoundRecorder.hpp	/^namespace sf$/;"	n
sf	Audio/SoundSource.hpp	/^namespace sf$/;"	n
sf	Audio/SoundStream.hpp	/^namespace sf$/;"	n
sf	Config.hpp	/^namespace sf$/;"	n
sf	Graphics/BlendMode.hpp	/^namespace sf$/;"	n
sf	Graphics/CircleShape.hpp	/^namespace sf$/;"	n
sf	Graphics/Color.hpp	/^namespace sf$/;"	n
sf	Graphics/ConvexShape.hpp	/^namespace sf$/;"	n
sf	Graphics/Drawable.hpp	/^namespace sf$/;"	n
sf	Graphics/Font.hpp	/^namespace sf$/;"	n
sf	Graphics/Glsl.hpp	/^namespace sf$/;"	n
sf	Graphics/Glyph.hpp	/^namespace sf$/;"	n
sf	Graphics/Image.hpp	/^namespace sf$/;"	n
sf	Graphics/PrimitiveType.hpp	/^namespace sf$/;"	n
sf	Graphics/Rect.hpp	/^namespace sf$/;"	n
sf	Graphics/RectangleShape.hpp	/^namespace sf$/;"	n
sf	Graphics/RenderStates.hpp	/^namespace sf$/;"	n
sf	Graphics/RenderTarget.hpp	/^namespace sf$/;"	n
sf	Graphics/RenderTexture.hpp	/^namespace sf$/;"	n
sf	Graphics/RenderWindow.hpp	/^namespace sf$/;"	n
sf	Graphics/Shader.hpp	/^namespace sf$/;"	n
sf	Graphics/Shape.hpp	/^namespace sf$/;"	n
sf	Graphics/Sprite.hpp	/^namespace sf$/;"	n
sf	Graphics/Text.hpp	/^namespace sf$/;"	n
sf	Graphics/Texture.hpp	/^namespace sf$/;"	n
sf	Graphics/Transform.hpp	/^namespace sf$/;"	n
sf	Graphics/Transformable.hpp	/^namespace sf$/;"	n
sf	Graphics/Vertex.hpp	/^namespace sf$/;"	n
sf	Graphics/VertexArray.hpp	/^namespace sf$/;"	n
sf	Graphics/VertexBuffer.hpp	/^namespace sf$/;"	n
sf	Graphics/View.hpp	/^namespace sf$/;"	n
sf	Network/Ftp.hpp	/^namespace sf$/;"	n
sf	Network/Http.hpp	/^namespace sf$/;"	n
sf	Network/IpAddress.hpp	/^namespace sf$/;"	n
sf	Network/Packet.hpp	/^namespace sf$/;"	n
sf	Network/Socket.hpp	/^namespace sf$/;"	n
sf	Network/SocketHandle.hpp	/^namespace sf$/;"	n
sf	Network/SocketSelector.hpp	/^namespace sf$/;"	n
sf	Network/TcpListener.hpp	/^namespace sf$/;"	n
sf	Network/TcpSocket.hpp	/^namespace sf$/;"	n
sf	Network/UdpSocket.hpp	/^namespace sf$/;"	n
sf	System/Clock.hpp	/^namespace sf$/;"	n
sf	System/Err.hpp	/^namespace sf$/;"	n
sf	System/FileInputStream.hpp	/^namespace sf$/;"	n
sf	System/InputStream.hpp	/^namespace sf$/;"	n
sf	System/Lock.hpp	/^namespace sf$/;"	n
sf	System/MemoryInputStream.hpp	/^namespace sf$/;"	n
sf	System/Mutex.hpp	/^namespace sf$/;"	n
sf	System/NativeActivity.hpp	/^namespace sf$/;"	n
sf	System/NonCopyable.hpp	/^namespace sf$/;"	n
sf	System/Sleep.hpp	/^namespace sf$/;"	n
sf	System/String.hpp	/^namespace sf$/;"	n
sf	System/Thread.hpp	/^namespace sf$/;"	n
sf	System/ThreadLocal.hpp	/^namespace sf$/;"	n
sf	System/ThreadLocalPtr.hpp	/^namespace sf$/;"	n
sf	System/ThreadLocalPtr.inl	/^namespace sf$/;"	n	file:
sf	System/Time.hpp	/^namespace sf$/;"	n
sf	System/Utf.hpp	/^namespace sf$/;"	n
sf	System/Vector2.hpp	/^namespace sf$/;"	n
sf	System/Vector3.hpp	/^namespace sf$/;"	n
sf	Window/Clipboard.hpp	/^namespace sf$/;"	n
sf	Window/Context.hpp	/^namespace sf$/;"	n
sf	Window/ContextSettings.hpp	/^namespace sf$/;"	n
sf	Window/Cursor.hpp	/^namespace sf$/;"	n
sf	Window/Event.hpp	/^namespace sf$/;"	n
sf	Window/GlResource.hpp	/^namespace sf$/;"	n
sf	Window/Joystick.hpp	/^namespace sf$/;"	n
sf	Window/Keyboard.hpp	/^namespace sf$/;"	n
sf	Window/Mouse.hpp	/^namespace sf$/;"	n
sf	Window/Sensor.hpp	/^namespace sf$/;"	n
sf	Window/Touch.hpp	/^namespace sf$/;"	n
sf	Window/VideoMode.hpp	/^namespace sf$/;"	n
sf	Window/Window.hpp	/^namespace sf$/;"	n
sf	Window/WindowHandle.hpp	/^namespace sf$/;"	n
sf	Window/WindowStyle.hpp	/^namespace sf$/;"	n
shader	Graphics/RenderStates.hpp	/^    const Shader*  shader;    \/\/\/< Shader$/;"	m	class:sf::RenderStates	typeref:typename:const Shader *
shift	Window/Event.hpp	/^        bool          shift;   \/\/\/< Is the Shift key pressed?$/;"	m	struct:sf::Event::KeyEvent	typeref:typename:bool
size	Window/Event.hpp	/^        SizeEvent             size;              \/\/\/< Size event parameters (Event::Resized)$/;"	m	union:sf::Event::__anonfbf05f04010a	typeref:typename:SizeEvent
stencilBits	Window/ContextSettings.hpp	/^    unsigned int stencilBits;       \/\/\/< Bits of the stencil buffer$/;"	m	struct:sf::ContextSettings	typeref:typename:unsigned int
system	Window/Event.hpp	/^        bool          system;  \/\/\/< Is the System key pressed?$/;"	m	struct:sf::Event::KeyEvent	typeref:typename:bool
texCoords	Graphics/Vertex.hpp	/^    Vector2f  texCoords; \/\/\/< Coordinates of the texture's pixel to map to the vertex$/;"	m	class:sf::Vertex	typeref:typename:Vector2f
texCoordsArrayEnabled	Graphics/RenderTarget.hpp	/^        bool      texCoordsArrayEnabled; \/\/\/< Is GL_TEXTURE_COORD_ARRAY client state enabled?$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:bool
text	Window/Event.hpp	/^        TextEvent             text;              \/\/\/< Text event parameters (Event::TextEnter/;"	m	union:sf::Event::__anonfbf05f04010a	typeref:typename:TextEvent
texture	Graphics/Font.hpp	/^        Texture          texture; \/\/\/< Texture containing the pixels of the glyphs$/;"	m	struct:sf::Font::Page	typeref:typename:Texture
texture	Graphics/RenderStates.hpp	/^    const Texture* texture;   \/\/\/< Texture$/;"	m	class:sf::RenderStates	typeref:typename:const Texture *
textureRect	Graphics/Glyph.hpp	/^    IntRect   textureRect; \/\/\/< Texture coordinates of the glyph inside the font's texture$/;"	m	class:sf::Glyph	typeref:typename:IntRect
toAnsi	System/Utf.inl	/^Out Utf<16>::toAnsi(In begin, In end, Out output, char replacement, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
toAnsi	System/Utf.inl	/^Out Utf<32>::toAnsi(In begin, In end, Out output, char replacement, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
toAnsi	System/Utf.inl	/^Out Utf<8>::toAnsi(In begin, In end, Out output, char replacement, const std::locale& locale)$/;"	f	class:Utf	typeref:typename:Out
toLatin1	System/Utf.inl	/^Out Utf<16>::toLatin1(In begin, In end, Out output, char replacement)$/;"	f	class:Utf	typeref:typename:Out
toLatin1	System/Utf.inl	/^Out Utf<32>::toLatin1(In begin, In end, Out output, char replacement)$/;"	f	class:Utf	typeref:typename:Out
toLatin1	System/Utf.inl	/^Out Utf<8>::toLatin1(In begin, In end, Out output, char replacement)$/;"	f	class:Utf	typeref:typename:Out
toUtf16	System/Utf.inl	/^Out Utf<16>::toUtf16(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf16	System/Utf.inl	/^Out Utf<32>::toUtf16(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf16	System/Utf.inl	/^Out Utf<8>::toUtf16(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf32	System/Utf.inl	/^Out Utf<16>::toUtf32(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf32	System/Utf.inl	/^Out Utf<32>::toUtf32(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf32	System/Utf.inl	/^Out Utf<8>::toUtf32(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf8	System/Utf.inl	/^Out Utf<16>::toUtf8(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf8	System/Utf.inl	/^Out Utf<32>::toUtf8(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toUtf8	System/Utf.inl	/^Out Utf<8>::toUtf8(In begin, In end, Out output)$/;"	f	class:Utf	typeref:typename:Out
toWide	System/Utf.inl	/^Out Utf<16>::toWide(In begin, In end, Out output, wchar_t replacement)$/;"	f	class:Utf	typeref:typename:Out
toWide	System/Utf.inl	/^Out Utf<32>::toWide(In begin, In end, Out output, wchar_t replacement)$/;"	f	class:Utf	typeref:typename:Out
toWide	System/Utf.inl	/^Out Utf<8>::toWide(In begin, In end, Out output, wchar_t replacement)$/;"	f	class:Utf	typeref:typename:Out
top	Graphics/Font.hpp	/^        unsigned int top;    \/\/\/< Y position of the row into the texture$/;"	m	struct:sf::Font::Row	typeref:typename:unsigned int
top	Graphics/Rect.hpp	/^    T top;    \/\/\/< Top coordinate of the rectangle$/;"	m	class:sf::Rect	typeref:typename:T
touch	Window/Event.hpp	/^        TouchEvent            touch;             \/\/\/< Touch events parameters (Event::TouchBe/;"	m	union:sf::Event::__anonfbf05f04010a	typeref:typename:TouchEvent
transform	Graphics/RenderStates.hpp	/^    Transform      transform; \/\/\/< Transform$/;"	m	class:sf::RenderStates	typeref:typename:Transform
type	Window/Event.hpp	/^        Sensor::Type type; \/\/\/< Type of the sensor$/;"	m	struct:sf::Event::SensorEvent	typeref:typename:Sensor::Type
type	Window/Event.hpp	/^    EventType type; \/\/\/< Type of the event$/;"	m	class:sf::Event	typeref:typename:EventType
unicode	Window/Event.hpp	/^        Uint32 unicode; \/\/\/< UTF-32 Unicode value of the character$/;"	m	struct:sf::Event::TextEvent	typeref:typename:Uint32
unregisterReader	Audio/SoundFileFactory.inl	/^void SoundFileFactory::unregisterReader()$/;"	f	class:sf::SoundFileFactory	typeref:typename:void
unregisterWriter	Audio/SoundFileFactory.inl	/^void SoundFileFactory::unregisterWriter()$/;"	f	class:sf::SoundFileFactory	typeref:typename:void
useVertexCache	Graphics/RenderTarget.hpp	/^        bool      useVertexCache; \/\/\/< Did we previously use the vertex cache?$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:bool
vendorId	Window/Joystick.hpp	/^        unsigned int vendorId;  \/\/\/< Manufacturer identifier$/;"	m	struct:sf::Joystick::Identification	typeref:typename:unsigned int
vertexCache	Graphics/RenderTarget.hpp	/^        Vertex    vertexCache[VertexCacheSize]; \/\/\/< Pre-transformed vertices cache$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:Vertex[]
viewChanged	Graphics/RenderTarget.hpp	/^        bool      viewChanged;    \/\/\/< Has the current view changed since last draw?$/;"	m	struct:sf::RenderTarget::StatesCache	typeref:typename:bool
w	Graphics/Glsl.inl	/^    T w; \/\/\/< 4th component (W) of the 4D vector$/;"	m	struct:Vector4	typeref:typename:T	file:
wheel	Window/Event.hpp	/^        Mouse::Wheel wheel; \/\/\/< Which wheel (for mice with multiple ones)$/;"	m	struct:sf::Event::MouseWheelScrollEvent	typeref:typename:Mouse::Wheel
width	Graphics/Font.hpp	/^        unsigned int width;  \/\/\/< Current width of the row$/;"	m	struct:sf::Font::Row	typeref:typename:unsigned int
width	Graphics/Rect.hpp	/^    T width;  \/\/\/< Width of the rectangle$/;"	m	class:sf::Rect	typeref:typename:T
width	Window/Event.hpp	/^        unsigned int width;  \/\/\/< New width, in pixels$/;"	m	struct:sf::Event::SizeEvent	typeref:typename:unsigned int
width	Window/VideoMode.hpp	/^    unsigned int width;        \/\/\/< Video mode width, in pixels$/;"	m	class:sf::VideoMode	typeref:typename:unsigned int
x	Graphics/Glsl.inl	/^    T x; \/\/\/< 1st component (X) of the 4D vector$/;"	m	struct:Vector4	typeref:typename:T	file:
x	System/Vector2.hpp	/^    T x; \/\/\/< X coordinate of the vector$/;"	m	class:sf::Vector2	typeref:typename:T
x	System/Vector3.hpp	/^    T x; \/\/\/< X coordinate of the vector$/;"	m	class:sf::Vector3	typeref:typename:T
x	Window/Event.hpp	/^        float x;           \/\/\/< Current value of the sensor on X axis$/;"	m	struct:sf::Event::SensorEvent	typeref:typename:float
x	Window/Event.hpp	/^        int           x;      \/\/\/< X position of the mouse pointer, relative to the left of t/;"	m	struct:sf::Event::MouseButtonEvent	typeref:typename:int
x	Window/Event.hpp	/^        int          x;     \/\/\/< X position of the mouse pointer, relative to the left of the/;"	m	struct:sf::Event::MouseWheelScrollEvent	typeref:typename:int
x	Window/Event.hpp	/^        int x;               \/\/\/< X position of the touch, relative to the left of the owner /;"	m	struct:sf::Event::TouchEvent	typeref:typename:int
x	Window/Event.hpp	/^        int x;     \/\/\/< X position of the mouse pointer, relative to the left of the owner wi/;"	m	struct:sf::Event::MouseWheelEvent	typeref:typename:int
x	Window/Event.hpp	/^        int x; \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseMoveEvent	typeref:typename:int
y	Graphics/Glsl.inl	/^    T y; \/\/\/< 2nd component (Y) of the 4D vector$/;"	m	struct:Vector4	typeref:typename:T	file:
y	System/Vector2.hpp	/^    T y; \/\/\/< Y coordinate of the vector$/;"	m	class:sf::Vector2	typeref:typename:T
y	System/Vector3.hpp	/^    T y; \/\/\/< Y coordinate of the vector$/;"	m	class:sf::Vector3	typeref:typename:T
y	Window/Event.hpp	/^        float y;           \/\/\/< Current value of the sensor on Y axis$/;"	m	struct:sf::Event::SensorEvent	typeref:typename:float
y	Window/Event.hpp	/^        int           y;      \/\/\/< Y position of the mouse pointer, relative to the top of th/;"	m	struct:sf::Event::MouseButtonEvent	typeref:typename:int
y	Window/Event.hpp	/^        int          y;     \/\/\/< Y position of the mouse pointer, relative to the top of the /;"	m	struct:sf::Event::MouseWheelScrollEvent	typeref:typename:int
y	Window/Event.hpp	/^        int y;               \/\/\/< Y position of the touch, relative to the top of the owner w/;"	m	struct:sf::Event::TouchEvent	typeref:typename:int
y	Window/Event.hpp	/^        int y;     \/\/\/< Y position of the mouse pointer, relative to the top of the owner win/;"	m	struct:sf::Event::MouseWheelEvent	typeref:typename:int
y	Window/Event.hpp	/^        int y; \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseMoveEvent	typeref:typename:int
z	Graphics/Glsl.inl	/^    T z; \/\/\/< 3rd component (Z) of the 4D vector$/;"	m	struct:Vector4	typeref:typename:T	file:
z	System/Vector3.hpp	/^    T z; \/\/\/< Z coordinate of the vector$/;"	m	class:sf::Vector3	typeref:typename:T
z	Window/Event.hpp	/^        float z;           \/\/\/< Current value of the sensor on Z axis$/;"	m	struct:sf::Event::SensorEvent	typeref:typename:float
~Drawable	Graphics/Drawable.hpp	/^    virtual ~Drawable() {}$/;"	f	class:sf::Drawable
~InputStream	System/InputStream.hpp	/^    virtual ~InputStream() {}$/;"	f	class:sf::InputStream
~NonCopyable	System/NonCopyable.hpp	/^    ~NonCopyable() {}$/;"	f	class:sf::NonCopyable
~SoundFileReader	Audio/SoundFileReader.hpp	/^    virtual ~SoundFileReader() {}$/;"	f	class:sf::SoundFileReader
~SoundFileWriter	Audio/SoundFileWriter.hpp	/^    virtual ~SoundFileWriter() {}$/;"	f	class:sf::SoundFileWriter
~ThreadFunc	System/Thread.inl	/^    virtual ~ThreadFunc() {}$/;"	f	struct:priv::ThreadFunc	file:
