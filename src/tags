!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/lillo/thewizard/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
ACCELERATION	Horse.cpp	/^#define ACCELERATION /;"	d	file:
ARROWS	Archer.cpp	/^#define ARROWS /;"	d	file:
ATRITO	Player.cpp	/^#define ATRITO /;"	d	file:
ATTACKPATH	Archer.cpp	/^#define ATTACKPATH /;"	d	file:
ATTACKPATH	Horse.cpp	/^#define ATTACKPATH /;"	d	file:
ATTACKPATH	Player.cpp	/^#define ATTACKPATH /;"	d	file:
ATTACKPATH	PlayerProjectile.cpp	/^#define ATTACKPATH /;"	d	file:
A_VELOCITY	Archer.cpp	/^#define A_VELOCITY /;"	d	file:
Alaska	Alaska.cpp	/^Levels::Alaska::Alaska(States::StateMachine* pSM, Managers::InputManager* pIM) : $/;"	f	class:Levels::Alaska
Animation	Animation.cpp	/^GraphicElements::Animation::Animation()$/;"	f	class:GraphicElements::Animation
Archer	Archer.cpp	/^dEnemy::Archer::Archer(const sf::Vector2f pos) : $/;"	f	class:dEnemy::Archer
Arrow	Arrow.cpp	/^Entities::Projectiles::Arrow::Arrow(sf::Vector2f pos, sf::Vector2f velocity, Entities::Character/;"	f	class:Entities::Projectiles::Arrow
Attack	Archer.cpp	/^void dEnemy::Archer::Attack(const bool b)$/;"	f	class:dEnemy::Archer	typeref:typename:void
Attack	Horse.cpp	/^void Entities::Characters::Enemies::Horse::Attack(const bool b)$/;"	f	class:Entities::Characters::Enemies::Horse	typeref:typename:void
Attack	Player.cpp	/^void Entities::Characters::Player::Attack(const bool b)$/;"	f	class:Entities::Characters::Player	typeref:typename:void
Attack	Warrior.cpp	/^void dEnemy::Warrior::Attack(const bool b)$/;"	f	class:dEnemy::Warrior	typeref:typename:void
Being	Being.cpp	/^Being::Being(ID _id) : $/;"	f	class:Being
Button	Button.cpp	/^GraphicElements::Button::Button(sf::Vector2f pos, unsigned int size, const std::string text):$/;"	f	class:GraphicElements::Button
CenterView	GraphicManager.cpp	/^void Managers::GraphicManager::CenterView(sf::Vector2f pos)$/;"	f	class:Managers::GraphicManager	typeref:typename:void
Character	Character.cpp	/^Entities::Characters::Character::Character(const sf::Vector2f pos, const sf::Vector2f size, ID i/;"	f	class:Entities::Characters::Character
Clear	EntityList.cpp	/^void Math::EntityList::Clear()$/;"	f	class:Math::EntityList	typeref:typename:void
Clear	GraphicManager.cpp	/^void Managers::GraphicManager::Clear()$/;"	f	class:Managers::GraphicManager	typeref:typename:void
Close	GraphicManager.cpp	/^void Managers::GraphicManager::Close()$/;"	f	class:Managers::GraphicManager	typeref:typename:void
CollisionManager	CollisionManager.cpp	/^Managers::CollisionManager::CollisionManager()$/;"	f	class:Managers::CollisionManager
ComplexAnimation	ComplexAnimation.cpp	/^GraphicElements::ComplexAnimation::ComplexAnimation():$/;"	f	class:GraphicElements::ComplexAnimation
CreateArcher	Level.cpp	/^void Levels::Level::CreateArcher(const sf::Vector2f pos, bool isRandom)$/;"	f	class:Levels::Level	typeref:typename:void
CreateEntity	Alaska.cpp	/^void Levels::Alaska::CreateEntity(char id, sf::Vector2f pos)$/;"	f	class:Levels::Alaska	typeref:typename:void
CreateEntity	Vulcano.cpp	/^void Levels::Vulcano::CreateEntity(char id, sf::Vector2f pos)$/;"	f	class:Levels::Vulcano	typeref:typename:void
CreateGround	Level.cpp	/^void Levels::Level::CreateGround(const sf::Vector2f pos)$/;"	f	class:Levels::Level	typeref:typename:void
CreateHorse	Vulcano.cpp	/^void Levels::Vulcano::CreateHorse(const sf::Vector2f pos)$/;"	f	class:Levels::Vulcano	typeref:typename:void
CreateIce	Alaska.cpp	/^void Levels::Alaska::CreateIce(const sf::Vector2f pos)$/;"	f	class:Levels::Alaska	typeref:typename:void
CreateLava	Vulcano.cpp	/^void Levels::Vulcano::CreateLava(const sf::Vector2f pos)$/;"	f	class:Levels::Vulcano	typeref:typename:void
CreateMap	Alaska.cpp	/^void Levels::Alaska::CreateMap()$/;"	f	class:Levels::Alaska	typeref:typename:void
CreateMap	Vulcano.cpp	/^void Levels::Vulcano::CreateMap()$/;"	f	class:Levels::Vulcano	typeref:typename:void
CreatePlayer	Level.cpp	/^void Levels::Level::CreatePlayer(const sf::Vector2f pos)$/;"	f	class:Levels::Level	typeref:typename:void
CreateWarrior	Alaska.cpp	/^void Levels::Alaska::CreateWarrior(const sf::Vector2f pos, bool isRandom)$/;"	f	class:Levels::Alaska	typeref:typename:void
DAMAGE	Horse.cpp	/^#define DAMAGE /;"	d	file:
DISTANCE_NM_ATTACK	Horse.cpp	/^#define DISTANCE_NM_ATTACK /;"	d	file:
Damage	Character.cpp	/^void Entities::Characters::Character::Damage()$/;"	f	class:Entities::Characters::Character	typeref:typename:void
Damage	Character.cpp	/^void Entities::Characters::Character::Damage(bool b)$/;"	f	class:Entities::Characters::Character	typeref:typename:void
Damage	Character.cpp	/^void Entities::Characters::Character::Damage(int damage)$/;"	f	class:Entities::Characters::Character	typeref:typename:void
Damage	Horse.cpp	/^void Entities::Characters::Enemies::Horse::Damage(bool b)$/;"	f	class:Entities::Characters::Enemies::Horse	typeref:typename:void
DeleteEntities	EntityList.cpp	/^void Math::EntityList::DeleteEntities()$/;"	f	class:Math::EntityList	typeref:typename:void
Display	GraphicManager.cpp	/^void Managers::GraphicManager::Display()$/;"	f	class:Managers::GraphicManager	typeref:typename:void
Draw	Alaska.cpp	/^void Levels::Alaska::Draw()$/;"	f	class:Levels::Alaska	typeref:typename:void
Draw	Animation.cpp	/^void GraphicElements::Animation::Draw()$/;"	f	class:GraphicElements::Animation	typeref:typename:void
Draw	Archer.cpp	/^void dEnemy::Archer::Draw()$/;"	f	class:dEnemy::Archer	typeref:typename:void
Draw	Arrow.cpp	/^void Entities::Projectiles::Arrow::Draw()$/;"	f	class:Entities::Projectiles::Arrow	typeref:typename:void
Draw	Button.cpp	/^void GraphicElements::Button::Draw()$/;"	f	class:GraphicElements::Button	typeref:typename:void
Draw	GameOverState.cpp	/^void States::GameOverState::Draw()$/;"	f	class:States::GameOverState	typeref:typename:void
Draw	GraphicManager.cpp	/^void Managers::GraphicManager::Draw(sf::RectangleShape &hitbox)$/;"	f	class:Managers::GraphicManager	typeref:typename:void
Draw	GraphicManager.cpp	/^void Managers::GraphicManager::Draw(sf::Text &text)$/;"	f	class:Managers::GraphicManager	typeref:typename:void
Draw	Horse.cpp	/^void Entities::Characters::Enemies::Horse::Draw()$/;"	f	class:Entities::Characters::Enemies::Horse	typeref:typename:void
Draw	LeaderBoard.cpp	/^void Menus::LeaderBoard::Draw()$/;"	f	class:Menus::LeaderBoard	typeref:typename:void
Draw	LoadGameState.cpp	/^void States::LoadGameState::Draw()$/;"	f	class:States::LoadGameState	typeref:typename:void
Draw	MainMenu.cpp	/^void Menus::MainMenu::Draw()$/;"	f	class:Menus::MainMenu	typeref:typename:void
Draw	NewGameMenu.cpp	/^void Menus::NewGameMenu::Draw()$/;"	f	class:Menus::NewGameMenu	typeref:typename:void
Draw	Obstacle.cpp	/^void Entities::Obstacles::Obstacle::Draw()$/;"	f	class:Entities::Obstacles::Obstacle	typeref:typename:void
Draw	PauseMenu.cpp	/^void Menus::PauseMenu::Draw()$/;"	f	class:Menus::PauseMenu	typeref:typename:void
Draw	Player.cpp	/^void Entities::Characters::Player::Draw()$/;"	f	class:Entities::Characters::Player	typeref:typename:void
Draw	PlayerProjectile.cpp	/^void Entities::Projectiles::PlasmaBall::Draw()$/;"	f	class:Entities::Projectiles::PlasmaBall	typeref:typename:void
Draw	Skull.cpp	/^void Entities::Projectiles::Skull::Draw()$/;"	f	class:Entities::Projectiles::Skull	typeref:typename:void
Draw	Vulcano.cpp	/^void Levels::Vulcano::Draw()$/;"	f	class:Levels::Vulcano	typeref:typename:void
Draw	Warrior.cpp	/^void dEnemy::Warrior::Draw()$/;"	f	class:dEnemy::Warrior	typeref:typename:void
DrawEntities	EntityList.cpp	/^void Math::EntityList::DrawEntities()$/;"	f	class:Math::EntityList	typeref:typename:void
ESPEED	Archer.cpp	/^#define ESPEED /;"	d	file:
ESPEED	Enemy.cpp	/^#define ESPEED /;"	d	file:
ESPEED	Warrior.cpp	/^#define ESPEED /;"	d	file:
Enemy	Enemy.cpp	/^dEnemy::Enemy(const sf::Vector2f pos, const sf::Vector2f size, ID id, int lves):$/;"	f	class:dEnemy
Entity	Entity.cpp	/^Entity::Entity(const sf::Vector2f pos, const sf::Vector2f size, ID id) : $/;"	f	class:Entity
EntityList	EntityList.cpp	/^Math::EntityList::EntityList() : entity_list(),$/;"	f	class:Math::EntityList
EventsManager	EventsManager.cpp	/^Managers::EventsManager::EventsManager():$/;"	f	class:Managers::EventsManager
Fall	Player.cpp	/^void Entities::Characters::Player::Fall()$/;"	f	class:Entities::Characters::Player	typeref:typename:void
Game	Game.cpp	/^Game::Game():$/;"	f	class:Game
GameOverState	GameOverState.cpp	/^States::GameOverState::GameOverState(States::StateMachine* pSMachine, Managers::InputManager* pI/;"	f	class:States::GameOverState
GraphicManager	GraphicManager.cpp	/^Managers::GraphicManager::GraphicManager(): $/;"	f	class:Managers::GraphicManager
Gravity	Entity.cpp	/^void Entity::Gravity()$/;"	f	class:Entity	typeref:typename:void
Ground	Ground.cpp	/^Entities::Obstacles::Ground::Ground(const sf::Vector2f pos):$/;"	f	class:Entities::Obstacles::Ground
HURTPATH	Player.cpp	/^#define HURTPATH /;"	d	file:
Horse	Horse.cpp	/^Entities::Characters::Enemies::Horse::Horse(sf::Vector2f pos) : attacking(false), $/;"	f	class:Entities::Characters::Enemies::Horse
IDLEPATH	Archer.cpp	/^#define IDLEPATH /;"	d	file:
IDLEPATH	Horse.cpp	/^#define IDLEPATH /;"	d	file:
IDLEPATH	Player.cpp	/^#define IDLEPATH /;"	d	file:
IDLEPATH	PlayerProjectile.cpp	/^#define IDLEPATH /;"	d	file:
IDLEPATH	Warrior.cpp	/^#define IDLEPATH /;"	d	file:
I_AND_J_R_PLAYERPROJECTILES	CollisionManager.cpp	/^#define I_AND_J_R_PLAYERPROJECTILES /;"	d	file:
Ice	Ice.cpp	/^Entities::Obstacles::Ice::Ice(const sf::Vector2f pos):$/;"	f	class:Entities::Obstacles::Ice
InputManager	InputManager.cpp	/^Managers::InputManager::InputManager()$/;"	f	class:Managers::InputManager
JUMPHEIGHT	Lava.cpp	/^#define JUMPHEIGHT /;"	d	file:
JUMPHEIGHT	Player.cpp	/^#define JUMPHEIGHT /;"	d	file:
JUMPPATH	Player.cpp	/^#define JUMPPATH /;"	d	file:
J_AND_I_R_PLAYERPROJECTILES	CollisionManager.cpp	/^#define J_AND_I_R_PLAYERPROJECTILES /;"	d	file:
Jump	Player.cpp	/^void Entities::Characters::Player::Jump()$/;"	f	class:Entities::Characters::Player	typeref:typename:void
KNOCKBACK	Archer.cpp	/^#define KNOCKBACK /;"	d	file:
KNOCKBACK	Enemy.cpp	/^#define KNOCKBACK /;"	d	file:
KNOCKBACK	Horse.cpp	/^#define KNOCKBACK /;"	d	file:
KNOCKBACK	Warrior.cpp	/^#define KNOCKBACK /;"	d	file:
LIFETIME	Skull.cpp	/^#define LIFETIME /;"	d	file:
LIVES	Horse.cpp	/^#define LIVES /;"	d	file:
LIVES	Player.cpp	/^#define LIVES /;"	d	file:
LIVES	Warrior.cpp	/^#define LIVES /;"	d	file:
Lava	Lava.cpp	/^Entities::Obstacles::Lava::Lava(const sf::Vector2f pos):$/;"	f	class:Entities::Obstacles::Lava
LeaderBoard	LeaderBoard.cpp	/^Menus::LeaderBoard::LeaderBoard(States::StateMachine* pSM, Managers::InputManager* pIM):$/;"	f	class:Menus::LeaderBoard
Level	Level.cpp	/^Levels::Level::Level(const ID id, const States::stateID sid, States::StateMachine* pSM, Managers/;"	f	class:Levels::Level
Load	Archer.cpp	/^void dEnemy::Archer::Load(std::ifstream &savefile)$/;"	f	class:dEnemy::Archer	typeref:typename:void
Load	EntityList.cpp	/^void Math::EntityList::Load(std::ifstream& savefile)$/;"	f	class:Math::EntityList	typeref:typename:void
Load	Horse.cpp	/^void Entities::Characters::Enemies::Horse::Load(std::ifstream &savefile)$/;"	f	class:Entities::Characters::Enemies::Horse	typeref:typename:void
Load	Obstacle.cpp	/^void Entities::Obstacles::Obstacle::Load(std::ifstream& savefile)$/;"	f	class:Entities::Obstacles::Obstacle	typeref:typename:void
Load	Player.cpp	/^void Entities::Characters::Player::Load(std::ifstream &savefile)$/;"	f	class:Entities::Characters::Player	typeref:typename:void
Load	Projectile.cpp	/^void Entities::Projectiles::Projectile::Load(std::ifstream& savefile)$/;"	f	class:Entities::Projectiles::Projectile	typeref:typename:void
Load	Warrior.cpp	/^void dEnemy::Warrior::Load(std::ifstream& savefile)$/;"	f	class:dEnemy::Warrior	typeref:typename:void
LoadAlaska	NewGameMenu.cpp	/^void Menus::NewGameMenu::LoadAlaska()$/;"	f	class:Menus::NewGameMenu	typeref:typename:void
LoadGameState	LoadGameState.cpp	/^States::LoadGameState::LoadGameState(States::StateMachine* pSMachine):$/;"	f	class:States::LoadGameState
LoadLevel	Level.cpp	/^void Levels::Level::LoadLevel()$/;"	f	class:Levels::Level	typeref:typename:void
LoadVulcano	NewGameMenu.cpp	/^void Menus::NewGameMenu::LoadVulcano()$/;"	f	class:Menus::NewGameMenu	typeref:typename:void
MAXV	Player.cpp	/^#define MAXV /;"	d	file:
MAXV	Warrior.cpp	/^#define MAXV /;"	d	file:
MAXVELOCITY	Horse.cpp	/^#define MAXVELOCITY /;"	d	file:
MAX_ARROW_VELOCITY	Archer.cpp	/^#define MAX_ARROW_VELOCITY /;"	d	file:
MELEEATTACKPATH	Archer.cpp	/^#define MELEEATTACKPATH /;"	d	file:
MELEEATTACKPATH	Warrior.cpp	/^#define MELEEATTACKPATH /;"	d	file:
MainMenu	MainMenu.cpp	/^Menus::MainMenu::MainMenu(States::StateMachine* pSM, Managers::InputManager* pIM):$/;"	f	class:Menus::MainMenu
Manage	CollisionManager.cpp	/^void Managers::CollisionManager::Manage()$/;"	f	class:Managers::CollisionManager	typeref:typename:void
Manage	EventsManager.cpp	/^void Managers::EventsManager::Manage()$/;"	f	class:Managers::EventsManager	typeref:typename:void
Menu	Menu.cpp	/^Menus::Menu::Menu():$/;"	f	class:Menus::Menu
MenuObserver	MenuObserver.cpp	/^Observers::MenuObserver::MenuObserver(Menus::Menu* menu)$/;"	f	class:Observers::MenuObserver
Move	Archer.cpp	/^void dEnemy::Archer::Move()$/;"	f	class:dEnemy::Archer	typeref:typename:void
Move	Arrow.cpp	/^void Entities::Projectiles::Arrow::Move()$/;"	f	class:Entities::Projectiles::Arrow	typeref:typename:void
Move	Ground.cpp	/^void Entities::Obstacles::Ground::Move()$/;"	f	class:Entities::Obstacles::Ground	typeref:typename:void
Move	Horse.cpp	/^void Entities::Characters::Enemies::Horse::Move()$/;"	f	class:Entities::Characters::Enemies::Horse	typeref:typename:void
Move	Ice.cpp	/^void Entities::Obstacles::Ice::Move()$/;"	f	class:Entities::Obstacles::Ice	typeref:typename:void
Move	Lava.cpp	/^void Entities::Obstacles::Lava::Move()$/;"	f	class:Entities::Obstacles::Lava	typeref:typename:void
Move	Player.cpp	/^void Entities::Characters::Player::Move()$/;"	f	class:Entities::Characters::Player	typeref:typename:void
Move	PlayerProjectile.cpp	/^void Entities::Projectiles::PlasmaBall::Move()$/;"	f	class:Entities::Projectiles::PlasmaBall	typeref:typename:void
Move	Skull.cpp	/^void Entities::Projectiles::Skull::Move()$/;"	f	class:Entities::Projectiles::Skull	typeref:typename:void
Move	Warrior.cpp	/^void dEnemy::Warrior::Move()$/;"	f	class:dEnemy::Warrior	typeref:typename:void
MoveDown	LeaderBoard.cpp	/^void Menus::LeaderBoard::MoveDown()$/;"	f	class:Menus::LeaderBoard	typeref:typename:void
MoveDown	MainMenu.cpp	/^void Menus::MainMenu::MoveDown()$/;"	f	class:Menus::MainMenu	typeref:typename:void
MoveDown	NewGameMenu.cpp	/^void Menus::NewGameMenu::MoveDown()$/;"	f	class:Menus::NewGameMenu	typeref:typename:void
MoveDown	PauseMenu.cpp	/^void Menus::PauseMenu::MoveDown()$/;"	f	class:Menus::PauseMenu	typeref:typename:void
MoveLeft	Player.cpp	/^void Entities::Characters::Player::MoveLeft(const bool b)$/;"	f	class:Entities::Characters::Player	typeref:typename:void
MoveRight	Player.cpp	/^void Entities::Characters::Player::MoveRight(const bool b)$/;"	f	class:Entities::Characters::Player	typeref:typename:void
MoveUp	LeaderBoard.cpp	/^void Menus::LeaderBoard::MoveUp()$/;"	f	class:Menus::LeaderBoard	typeref:typename:void
MoveUp	MainMenu.cpp	/^void Menus::MainMenu::MoveUp()$/;"	f	class:Menus::MainMenu	typeref:typename:void
MoveUp	NewGameMenu.cpp	/^void Menus::NewGameMenu::MoveUp()$/;"	f	class:Menus::NewGameMenu	typeref:typename:void
MoveUp	PauseMenu.cpp	/^void Menus::PauseMenu::MoveUp()$/;"	f	class:Menus::PauseMenu	typeref:typename:void
NMSPEED	Horse.cpp	/^#define NMSPEED /;"	d	file:
NewGameMenu	NewGameMenu.cpp	/^Menus::NewGameMenu::NewGameMenu(States::StateMachine* pSM, Managers::InputManager* pIM):$/;"	f	class:Menus::NewGameMenu
Observer	Observer.cpp	/^Observers::Observer::Observer()$/;"	f	class:Observers::Observer
Obstacle	Obstacle.cpp	/^Entities::Obstacles::Obstacle::Obstacle(const sf::Vector2f pos, const sf::Vector2f size, ID id):$/;"	f	class:Entities::Obstacles::Obstacle
OnCollision	Archer.cpp	/^void dEnemy::Archer::OnCollision(Entities::Entity *ent)$/;"	f	class:dEnemy::Archer	typeref:typename:void
OnCollision	Arrow.cpp	/^void Entities::Projectiles::Arrow::OnCollision(Entities::Entity* ent)$/;"	f	class:Entities::Projectiles::Arrow	typeref:typename:void
OnCollision	Ground.cpp	/^void Entities::Obstacles::Ground::OnCollision(Entities::Entity* ent)$/;"	f	class:Entities::Obstacles::Ground	typeref:typename:void
OnCollision	Horse.cpp	/^void Entities::Characters::Enemies::Horse::OnCollision(Entities::Entity *ent)$/;"	f	class:Entities::Characters::Enemies::Horse	typeref:typename:void
OnCollision	Ice.cpp	/^void Entities::Obstacles::Ice::OnCollision(Entities::Entity* ent)$/;"	f	class:Entities::Obstacles::Ice	typeref:typename:void
OnCollision	Lava.cpp	/^void Entities::Obstacles::Lava::OnCollision(Entities::Entity* ent)$/;"	f	class:Entities::Obstacles::Lava	typeref:typename:void
OnCollision	Player.cpp	/^void Entities::Characters::Player::OnCollision(Entities::Entity *ent)$/;"	f	class:Entities::Characters::Player	typeref:typename:void
OnCollision	PlayerProjectile.cpp	/^void Entities::Projectiles::PlasmaBall::OnCollision(Entities::Entity* ent)$/;"	f	class:Entities::Projectiles::PlasmaBall	typeref:typename:void
OnCollision	Skull.cpp	/^void Entities::Projectiles::Skull::OnCollision(Entities::Entity* ent)$/;"	f	class:Entities::Projectiles::Skull	typeref:typename:void
OnCollision	Warrior.cpp	/^void dEnemy::Warrior::OnCollision(Entities::Entity* ent)$/;"	f	class:dEnemy::Warrior	typeref:typename:void
PATH	Ice.cpp	/^#define PATH /;"	d	file:
PLASMABALLS	Player.cpp	/^#define PLASMABALLS /;"	d	file:
PSPEED	Player.cpp	/^#define PSPEED /;"	d	file:
PauseMenu	PauseMenu.cpp	/^Menus::PauseMenu::PauseMenu(States::StateMachine *pSM, Managers::InputManager *pIM):$/;"	f	class:Menus::PauseMenu
PlasmaBall	PlayerProjectile.cpp	/^Entities::Projectiles::PlasmaBall::PlasmaBall(sf::Vector2f pos, sf::Vector2f velocity, Entities:/;"	f	class:Entities::Projectiles::PlasmaBall
Player	Player.cpp	/^Entities::Characters::Player::Player(const sf::Vector2f pos) : $/;"	f	class:Entities::Characters::Player
PlayerInputManager	PlayerInputManager.cpp	/^PlayerInputManager::PlayerInputManager(Entities::Characters::Player *pP, Entities::Characters::P/;"	f	class:PlayerInputManager
Projectile	Projectile.cpp	/^Entities::Projectiles::Projectile::Projectile(sf::Vector2f pos, sf::Vector2f velocity, Entities:/;"	f	class:Entities::Projectiles::Projectile
PushButton	Menu.cpp	/^void Menus::Menu::PushButton(GraphicElements::Button* button)$/;"	f	class:Menus::Menu	typeref:typename:void
PushLevel	LoadGameState.cpp	/^void States::LoadGameState::PushLevel(Levels::Level* level)$/;"	f	class:States::LoadGameState	typeref:typename:void
PushLevel	NewGameMenu.cpp	/^void Menus::NewGameMenu::PushLevel(Levels::Level* level)$/;"	f	class:Menus::NewGameMenu	typeref:typename:void
Push_BackEntity	EntityList.cpp	/^void Math::EntityList::Push_BackEntity(Entities::Entity *ent)$/;"	f	class:Math::EntityList	typeref:typename:void
Push_FrontEntity	EntityList.cpp	/^void Math::EntityList::Push_FrontEntity(Entities::Entity *ent)$/;"	f	class:Math::EntityList	typeref:typename:void
RCOEFICIENT	Skull.cpp	/^#define RCOEFICIENT /;"	d	file:
Reset	LeaderBoard.cpp	/^void Menus::LeaderBoard::Reset()$/;"	f	class:Menus::LeaderBoard	typeref:typename:void
Reset	Level.cpp	/^void Levels::Level::Reset()$/;"	f	class:Levels::Level	typeref:typename:void
Reset	SimpleAnimation.cpp	/^void GraphicElements::SimpleAnimation::Reset()$/;"	f	class:GraphicElements::SimpleAnimation	typeref:typename:void
Reset	SimpleSprite.cpp	/^void GraphicElements::SimpleSprite::Reset(const char* path, sf::Vector2f position, sf::Vector2f /;"	f	class:GraphicElements::SimpleSprite	typeref:typename:void
Reset	State.cpp	/^void States::State::Reset()$/;"	f	class:States::State	typeref:typename:void
Run	Game.cpp	/^void Game::Run()$/;"	f	class:Game	typeref:typename:void
SHOTCOUNT	Horse.cpp	/^#define SHOTCOUNT /;"	d	file:
SIZEX	Archer.cpp	/^#define SIZEX /;"	d	file:
SIZEX	Enemy.cpp	/^#define SIZEX /;"	d	file:
SIZEX	Ground.cpp	/^#define SIZEX /;"	d	file:
SIZEX	Horse.cpp	/^#define SIZEX /;"	d	file:
SIZEX	Lava.cpp	/^#define SIZEX /;"	d	file:
SIZEX	Player.cpp	/^#define SIZEX /;"	d	file:
SIZEX	Warrior.cpp	/^#define SIZEX /;"	d	file:
SIZEY	Archer.cpp	/^#define SIZEY /;"	d	file:
SIZEY	Enemy.cpp	/^#define SIZEY /;"	d	file:
SIZEY	Ground.cpp	/^#define SIZEY /;"	d	file:
SIZEY	Horse.cpp	/^#define SIZEY /;"	d	file:
SIZEY	Lava.cpp	/^#define SIZEY /;"	d	file:
SIZEY	Player.cpp	/^#define SIZEY /;"	d	file:
SIZEY	Warrior.cpp	/^#define SIZEY /;"	d	file:
Save	Archer.cpp	/^void dEnemy::Archer::Save(std::ofstream &savefile)$/;"	f	class:dEnemy::Archer	typeref:typename:void
Save	EntityList.cpp	/^void Math::EntityList::Save(std::ofstream &savefile)$/;"	f	class:Math::EntityList	typeref:typename:void
Save	Horse.cpp	/^void Entities::Characters::Enemies::Horse::Save(std::ofstream &savefile)$/;"	f	class:Entities::Characters::Enemies::Horse	typeref:typename:void
Save	Obstacle.cpp	/^void Entities::Obstacles::Obstacle::Save(std::ofstream& savefile)$/;"	f	class:Entities::Obstacles::Obstacle	typeref:typename:void
Save	Player.cpp	/^void Entities::Characters::Player::Save(std::ofstream& savefile)$/;"	f	class:Entities::Characters::Player	typeref:typename:void
Save	Projectile.cpp	/^void Entities::Projectiles::Projectile::Save(std::ofstream& savefile)$/;"	f	class:Entities::Projectiles::Projectile	typeref:typename:void
Save	Warrior.cpp	/^void dEnemy::Warrior::Save(std::ofstream& savefile)$/;"	f	class:dEnemy::Warrior	typeref:typename:void
SaveData	GameOverState.cpp	/^void States::GameOverState::SaveData()$/;"	f	class:States::GameOverState	typeref:typename:void
SaveLevel	Level.cpp	/^void Levels::Level::SaveLevel()$/;"	f	class:Levels::Level	typeref:typename:void
Score	Player.cpp	/^void Entities::Characters::Player::Score(ID id)$/;"	f	class:Entities::Characters::Player	typeref:typename:void
Select	LeaderBoard.cpp	/^void Menus::LeaderBoard::Select()$/;"	f	class:Menus::LeaderBoard	typeref:typename:void
Select	MainMenu.cpp	/^void Menus::MainMenu::Select()$/;"	f	class:Menus::MainMenu	typeref:typename:void
Select	NewGameMenu.cpp	/^void Menus::NewGameMenu::Select()$/;"	f	class:Menus::NewGameMenu	typeref:typename:void
Select	PauseMenu.cpp	/^void Menus::PauseMenu::Select()$/;"	f	class:Menus::PauseMenu	typeref:typename:void
Selected	Button.cpp	/^void GraphicElements::Button::Selected()$/;"	f	class:GraphicElements::Button	typeref:typename:void
Shoot	PlayerProjectile.cpp	/^void Entities::Projectiles::PlasmaBall::Shoot(sf::Vector2f pos, sf::Vector2f vel)$/;"	f	class:Entities::Projectiles::PlasmaBall	typeref:typename:void
Shoot	Projectile.cpp	/^void Entities::Projectiles::Projectile::Shoot(sf::Vector2f pos, sf::Vector2f vel)$/;"	f	class:Entities::Projectiles::Projectile	typeref:typename:void
SimpleAnimation	SimpleAnimation.cpp	/^GraphicElements::SimpleAnimation::SimpleAnimation(const char* path, const sf::Vector2u imageCoun/;"	f	class:GraphicElements::SimpleAnimation
SimpleSprite	SimpleSprite.cpp	/^GraphicElements::SimpleSprite::SimpleSprite():$/;"	f	class:GraphicElements::SimpleSprite
Size	EntityList.cpp	/^int Math::EntityList::Size() {return entity_list.getSize();}$/;"	f	class:Math::EntityList	typeref:typename:int
Skull	Skull.cpp	/^Entities::Projectiles::Skull::Skull(sf::Vector2f pos, sf::Vector2f velocity, Entities::Character/;"	f	class:Entities::Projectiles::Skull
State	State.cpp	/^States::State::State(StateMachine* pSMachine, States::stateID id):$/;"	f	class:States::State
StateMachine	StateMachine.cpp	/^States::StateMachine::StateMachine()$/;"	f	class:States::StateMachine
TEXTUREPATH	Ground.cpp	/^#define TEXTUREPATH /;"	d	file:
TEXTUREPATH	Lava.cpp	/^#define TEXTUREPATH /;"	d	file:
TextInputObserver	TextInputObserver.cpp	/^Observers::TextInputObserver::TextInputObserver(States::GameOverState* pGameOver):$/;"	f	class:Observers::TextInputObserver
UnSelected	Button.cpp	/^void GraphicElements::Button::UnSelected()$/;"	f	class:GraphicElements::Button	typeref:typename:void
Update	Alaska.cpp	/^void Levels::Alaska::Update()$/;"	f	class:Levels::Alaska	typeref:typename:void
Update	Archer.cpp	/^void dEnemy::Archer::Update()$/;"	f	class:dEnemy::Archer	typeref:typename:void
Update	Arrow.cpp	/^void Entities::Projectiles::Arrow::Update()$/;"	f	class:Entities::Projectiles::Arrow	typeref:typename:void
Update	Button.cpp	/^void GraphicElements::Button::Update()$/;"	f	class:GraphicElements::Button	typeref:typename:void
Update	ComplexAnimation.cpp	/^void GraphicElements::ComplexAnimation::Update(Animation_ID id, sf::Vector2f position, bool face/;"	f	class:GraphicElements::ComplexAnimation	typeref:typename:void
Update	GameOverState.cpp	/^void States::GameOverState::Update()$/;"	f	class:States::GameOverState	typeref:typename:void
Update	Ground.cpp	/^void Entities::Obstacles::Ground::Update()$/;"	f	class:Entities::Obstacles::Ground	typeref:typename:void
Update	Horse.cpp	/^void Entities::Characters::Enemies::Horse::Update()$/;"	f	class:Entities::Characters::Enemies::Horse	typeref:typename:void
Update	Ice.cpp	/^void Entities::Obstacles::Ice::Update()$/;"	f	class:Entities::Obstacles::Ice	typeref:typename:void
Update	Lava.cpp	/^void Entities::Obstacles::Lava::Update()$/;"	f	class:Entities::Obstacles::Lava	typeref:typename:void
Update	LeaderBoard.cpp	/^void Menus::LeaderBoard::Update()$/;"	f	class:Menus::LeaderBoard	typeref:typename:void
Update	LoadGameState.cpp	/^void States::LoadGameState::Update()$/;"	f	class:States::LoadGameState	typeref:typename:void
Update	MainMenu.cpp	/^void Menus::MainMenu::Update()$/;"	f	class:Menus::MainMenu	typeref:typename:void
Update	NewGameMenu.cpp	/^void Menus::NewGameMenu::Update()$/;"	f	class:Menus::NewGameMenu	typeref:typename:void
Update	PauseMenu.cpp	/^void Menus::PauseMenu::Update()$/;"	f	class:Menus::PauseMenu	typeref:typename:void
Update	Player.cpp	/^void Entities::Characters::Player::Update()$/;"	f	class:Entities::Characters::Player	typeref:typename:void
Update	PlayerProjectile.cpp	/^void Entities::Projectiles::PlasmaBall::Update()$/;"	f	class:Entities::Projectiles::PlasmaBall	typeref:typename:void
Update	SimpleAnimation.cpp	/^void GraphicElements::SimpleAnimation::Update(sf::Vector2f Position, bool faceRight)$/;"	f	class:GraphicElements::SimpleAnimation	typeref:typename:void
Update	SimpleSprite.cpp	/^void GraphicElements::SimpleSprite::Update(sf::Vector2f Position)$/;"	f	class:GraphicElements::SimpleSprite	typeref:typename:void
Update	Skull.cpp	/^void Entities::Projectiles::Skull::Update()$/;"	f	class:Entities::Projectiles::Skull	typeref:typename:void
Update	Vulcano.cpp	/^void Levels::Vulcano::Update()$/;"	f	class:Levels::Vulcano	typeref:typename:void
Update	Warrior.cpp	/^void dEnemy::Warrior::Update()$/;"	f	class:dEnemy::Warrior	typeref:typename:void
UpdateEntities	EntityList.cpp	/^void Math::EntityList::UpdateEntities()$/;"	f	class:Math::EntityList	typeref:typename:void
Vulcano	Vulcano.cpp	/^Levels::Vulcano::Vulcano(States::StateMachine* pSM, Managers::InputManager* pIM) : $/;"	f	class:Levels::Vulcano
WALKPATH	Archer.cpp	/^#define WALKPATH /;"	d	file:
WALKPATH	Player.cpp	/^#define WALKPATH /;"	d	file:
WALKPATH	Warrior.cpp	/^#define WALKPATH /;"	d	file:
Warrior	Warrior.cpp	/^dEnemy::Warrior::Warrior(const sf::Vector2f pos):$/;"	f	class:dEnemy::Warrior
absolute	Math.cpp	/^double absolute(double value)$/;"	f	typeref:typename:double
absolute	Math.cpp	/^float absolute(float value)$/;"	f	typeref:typename:float
absolute	Math.cpp	/^int absolute(int value)$/;"	f	typeref:typename:int
addObserver	InputManager.cpp	/^void Managers::InputManager::addObserver(Observers::Observer* observer)$/;"	f	class:Managers::InputManager	typeref:typename:void
changeCurrentState	StateMachine.cpp	/^void States::StateMachine::changeCurrentState(States::stateID sId)$/;"	f	class:States::StateMachine	typeref:typename:void
changeState	State.cpp	/^void States::State::changeState(States::stateID sID)$/;"	f	class:States::State	typeref:typename:void
changeText	Button.cpp	/^void GraphicElements::Button::changeText(std::string newtext)$/;"	f	class:GraphicElements::Button	typeref:typename:void
clock	GraphicManager.cpp	/^sf::Clock Managers::GraphicManager::clock;$/;"	m	class:Managers::GraphicManager	typeref:typename:sf::Clock
dEnemy	Archer.cpp	/^#define dEnemy /;"	d	file:
dEnemy	Enemy.cpp	/^#define dEnemy /;"	d	file:
dEnemy	Warrior.cpp	/^#define dEnemy /;"	d	file:
dPlayer	Archer.cpp	/^#define dPlayer /;"	d	file:
dPlayer	Horse.cpp	/^#define dPlayer /;"	d	file:
dt	Entity.cpp	/^float Entity::dt(0);$/;"	m	class:Entity	typeref:typename:float
dt	GraphicManager.cpp	/^float Managers::GraphicManager::dt(0);$/;"	m	class:Managers::GraphicManager	typeref:typename:float
faceRight	SimpleSprite.cpp	/^void GraphicElements::SimpleSprite::faceRight(bool b)$/;"	f	class:GraphicElements::SimpleSprite	typeref:typename:void
friction	Ground.cpp	/^const float Entities::Obstacles::Ground::friction(0.45);/;"	m	class:Entities::Obstacles::Ground	typeref:typename:const float
friction	Ice.cpp	/^const float Entities::Obstacles::Ice::friction(0);/;"	m	class:Entities::Obstacles::Ice	typeref:typename:const float
getAlive	Character.cpp	/^const bool Entities::Characters::Character::getAlive() const { return alive; }/;"	f	class:Entities::Characters::Character	typeref:typename:const bool
getCollided	Projectile.cpp	/^const bool Entities::Projectiles::Projectile::getCollided() const { return collided;}$/;"	f	class:Entities::Projectiles::Projectile	typeref:typename:const bool
getCurrentStateID	StateMachine.cpp	/^const States::stateID States::StateMachine::getCurrentStateID() {return currentState;}$/;"	f	class:States::StateMachine	typeref:typename:const States::stateID
getDeltaTime	GraphicManager.cpp	/^float Managers::GraphicManager::getDeltaTime()$/;"	f	class:Managers::GraphicManager	typeref:typename:float
getDt	Entity.cpp	/^float Entities::Entity::getDt()$/;"	f	class:Entities::Entity	typeref:typename:float
getGrounded	Entity.cpp	/^const bool Entity::getGrounded() const { return grounded; }$/;"	f	class:Entity	typeref:typename:const bool
getID	Being.cpp	/^const ID Being::getID() const$/;"	f	class:Being	typeref:typename:const ID
getInstance	EventsManager.cpp	/^Managers::EventsManager* Managers::EventsManager::getInstance()$/;"	f	class:Managers::EventsManager	typeref:typename:Managers::EventsManager *
getInstance	Game.cpp	/^Game* Game::getInstance()$/;"	f	class:Game	typeref:typename:Game *
getInstance	GraphicManager.cpp	/^Managers::GraphicManager *Managers::GraphicManager::getInstance()$/;"	f	class:Managers::GraphicManager	typeref:typename:Managers::GraphicManager *
getInstance	InputManager.cpp	/^Managers::InputManager* Managers::InputManager::getInstance()$/;"	f	class:Managers::InputManager	typeref:typename:Managers::InputManager *
getIsRunning	State.cpp	/^const bool States::State::getIsRunning() const {return isRunning;}$/;"	f	class:States::State	typeref:typename:const bool
getLevelStarted	Level.cpp	/^const bool Levels::Level::getLevelStarted() const {return levelStarted;}$/;"	f	class:Levels::Level	typeref:typename:const bool
getNearest	Archer.cpp	/^dPlayer dEnemy::Archer::getNearest()$/;"	f	class:dEnemy::Archer	typeref:typename:dPlayer
getNearest	Horse.cpp	/^dPlayer Entities::Characters::Enemies::Horse::getNearest()$/;"	f	class:Entities::Characters::Enemies::Horse	typeref:typename:dPlayer
getObserver	Menu.cpp	/^const Observers::Observer* Menus::Menu::getObserver() const {return static_cast<Observers::Obser/;"	f	class:Menus::Menu	typeref:typename:const Observers::Observer *
getOwner	Projectile.cpp	/^Entities::Characters::Character* Entities::Projectiles::Projectile::getOwner() {return owner;}$/;"	f	class:Entities::Projectiles::Projectile	typeref:typename:Entities::Characters::Character *
getPlayer2Score	Level.cpp	/^int Levels::Level::getPlayer2Score() const {return pPlayer2->getPoints();}$/;"	f	class:Levels::Level	typeref:typename:int
getPlayerInputManager	Level.cpp	/^Observers::PlayerInputManager* Levels::Level::getPlayerInputManager() const { return pPIM;}$/;"	f	class:Levels::Level	typeref:typename:Observers::PlayerInputManager *
getPlayerScore	Level.cpp	/^int Levels::Level::getPlayerScore() const {return pPlayer->getPoints();}$/;"	f	class:Levels::Level	typeref:typename:int
getPoints	Player.cpp	/^const int Entities::Characters::Player::getPoints() const {return Points;}$/;"	f	class:Entities::Characters::Player	typeref:typename:const int
getPosition	Entity.cpp	/^sf::Vector2f Entity::getPosition() const$/;"	f	class:Entity	typeref:typename:sf::Vector2f
getScore	Level.cpp	/^int Levels::Level::getScore() const {return totalScore;}$/;"	f	class:Levels::Level	typeref:typename:int
getShots	Archer.cpp	/^std::vector<Entities::Projectiles::Arrow *> *Entities::Characters::Enemies::Archer::getShots()$/;"	f	class:Entities::Characters::Enemies::Archer	typeref:typename:std::vector<Entities::Projectiles::Arrow * > *
getShots	Player.cpp	/^std::vector<Entities::Projectiles::PlasmaBall*>* Entities::Characters::Player::getShots() {retur/;"	f	class:Entities::Characters::Player	typeref:typename:std::vector<Entities::Projectiles::PlasmaBall * > *
getSize	Entity.cpp	/^sf::Vector2f Entity::getSize() const$/;"	f	class:Entity	typeref:typename:sf::Vector2f
getSize	SimpleAnimation.cpp	/^sf::IntRect GraphicElements::SimpleAnimation::getSize() const {return uvRect;}$/;"	f	class:GraphicElements::SimpleAnimation	typeref:typename:sf::IntRect
getSkulls	Horse.cpp	/^std::vector<Entities::Projectiles::Skull*>* Entities::Characters::Enemies::Horse::getSkulls()$/;"	f	class:Entities::Characters::Enemies::Horse	typeref:typename:std::vector<Entities::Projectiles::Skull * > *
getStateID	State.cpp	/^const States::stateID States::State::getStateID() const {return id;}$/;"	f	class:States::State	typeref:typename:const States::stateID
getTList	EntityList.cpp	/^Math::List<Entities::Entity> &Math::EntityList::getTList()$/;"	f	class:Math::EntityList	typeref:typename:Math::List<Entities::Entity> &
getTexture	SimpleAnimation.cpp	/^sf::Texture* GraphicElements::SimpleAnimation::getTexture() {return texture;}$/;"	f	class:GraphicElements::SimpleAnimation	typeref:typename:sf::Texture *
getVelocity	Entity.cpp	/^sf::Vector2f Entity::getVelocity() const$/;"	f	class:Entity	typeref:typename:sf::Vector2f
getViewCenter	GraphicManager.cpp	/^sf::Vector2f Managers::GraphicManager::getViewCenter() const {return view.getCenter();}$/;"	f	class:Managers::GraphicManager	typeref:typename:sf::Vector2f
getWindow	GraphicManager.cpp	/^sf::RenderWindow *Managers::GraphicManager::getWindow() { return &window; } \/\/ retorna um pont/;"	f	class:Managers::GraphicManager	typeref:typename:sf::RenderWindow *
gravity	Entity.cpp	/^const float Entity::gravity(0.78f); \/\/ 8.166 valor de teste$/;"	m	class:Entity	typeref:typename:const float
inputKey	GameOverState.cpp	/^void States::GameOverState::inputKey(std::string key)$/;"	f	class:States::GameOverState	typeref:typename:void
isWindowOpen	GraphicManager.cpp	/^const bool Managers::GraphicManager::isWindowOpen() const { return window.isOpen(); } \/\/ retor/;"	f	class:Managers::GraphicManager	typeref:typename:const bool
loadTexture	GraphicManager.cpp	/^sf::Texture *Managers::GraphicManager::loadTexture(const char *path)$/;"	f	class:Managers::GraphicManager	typeref:typename:sf::Texture *
main	main.cpp	/^int main()$/;"	f	typeref:typename:int
normalCollision	CollisionManager.cpp	/^void Managers::CollisionManager::normalCollision(Entities::Entity* ent, float dist_x, float dist/;"	f	class:Managers::CollisionManager	typeref:typename:void
notifyKeyPressed	MenuObserver.cpp	/^void Observers::MenuObserver::notifyKeyPressed(std::string key)$/;"	f	class:Observers::MenuObserver	typeref:typename:void
notifyKeyPressed	PlayerInputManager.cpp	/^void PlayerInputManager::notifyKeyPressed(std::string key)$/;"	f	class:PlayerInputManager	typeref:typename:void
notifyKeyPressed	TextInputObserver.cpp	/^void Observers::TextInputObserver::notifyKeyPressed(std::string key)$/;"	f	class:Observers::TextInputObserver	typeref:typename:void
notifyKeyReleased	MenuObserver.cpp	/^void Observers::MenuObserver::notifyKeyReleased(std::string key)$/;"	f	class:Observers::MenuObserver	typeref:typename:void
notifyKeyReleased	PlayerInputManager.cpp	/^void PlayerInputManager::notifyKeyReleased(std::string key)$/;"	f	class:PlayerInputManager	typeref:typename:void
notifyKeyReleased	TextInputObserver.cpp	/^void Observers::TextInputObserver::notifyKeyReleased(std::string key)$/;"	f	class:Observers::TextInputObserver	typeref:typename:void
operator --	Character.cpp	/^void Entities::Characters::Character::operator--() { lives--; if(lives <= 0) alive = false; }$/;"	f	class:Entities::Characters::Character	typeref:typename:void
operator []	EntityList.cpp	/^Entities::Entity *Math::EntityList::operator[](int idx)$/;"	f	class:Math::EntityList	typeref:typename:Entities::Entity *
pressedInput	InputManager.cpp	/^void Managers::InputManager::pressedInput(sf::Event::KeyEvent key)$/;"	f	class:Managers::InputManager	typeref:typename:void
pushAnimation	ComplexAnimation.cpp	/^void GraphicElements::ComplexAnimation::pushAnimation(Animation_ID id, const char* path, sf::Vec/;"	f	class:GraphicElements::ComplexAnimation	typeref:typename:void
push_State	StateMachine.cpp	/^void States::StateMachine::push_State(States::State* pS) $/;"	f	class:States::StateMachine	typeref:typename:void
releasedInput	InputManager.cpp	/^void Managers::InputManager::releasedInput(sf::Event::KeyEvent key)$/;"	f	class:Managers::InputManager	typeref:typename:void
removeObserver	InputManager.cpp	/^void Managers::InputManager::removeObserver(Observers::Observer* observer)$/;"	f	class:Managers::InputManager	typeref:typename:void
runCurrentState	StateMachine.cpp	/^void States::StateMachine::runCurrentState()$/;"	f	class:States::StateMachine	typeref:typename:void
selection_sort	GameOverState.cpp	/^void States::GameOverState::selection_sort (std::vector<int> &A, int n, std::vector<std::string>/;"	f	class:States::GameOverState	typeref:typename:void
setAlive	Character.cpp	/^void Entities::Characters::Character::setAlive(bool alive) {this->alive = alive;}$/;"	f	class:Entities::Characters::Character	typeref:typename:void
setBottomLimit	GraphicManager.cpp	/^void Managers::GraphicManager::setBottomLimit(float limit)$/;"	f	class:Managers::GraphicManager	typeref:typename:void
setDList	CollisionManager.cpp	/^void Managers::CollisionManager::setDList(Math::List<Entities::Entity>& ents)$/;"	f	class:Managers::CollisionManager	typeref:typename:void
setFacing	Player.cpp	/^void Entities::Characters::Player::setFacing(int side)$/;"	f	class:Entities::Characters::Player	typeref:typename:void
setFriction	Player.cpp	/^void Entities::Characters::Player::setFriction(float friction) {this->friction = friction;}$/;"	f	class:Entities::Characters::Player	typeref:typename:void
setGrounded	Entity.cpp	/^void Entity::setGrounded(bool b) { grounded = b; }$/;"	f	class:Entity	typeref:typename:void
setLeftLimit	GraphicManager.cpp	/^void Managers::GraphicManager::setLeftLimit(float limit)$/;"	f	class:Managers::GraphicManager	typeref:typename:void
setLives	Character.cpp	/^void Entities::Characters::Character::setLives(int lives) { this->lives = lives;}$/;"	f	class:Entities::Characters::Character	typeref:typename:void
setPlayer	Archer.cpp	/^void dEnemy::Archer::setPlayer(Player *pPlayer)$/;"	f	class:dEnemy::Archer	typeref:typename:void
setPlayer	Horse.cpp	/^void Entities::Characters::Enemies::Horse::setPlayer(Player *player1)$/;"	f	class:Entities::Characters::Enemies::Horse	typeref:typename:void
setPlayer2	Archer.cpp	/^void dEnemy::Archer::setPlayer2(Player *pPlayer2)$/;"	f	class:dEnemy::Archer	typeref:typename:void
setPlayer2	Horse.cpp	/^void Entities::Characters::Enemies::Horse::setPlayer2(Player *player2)$/;"	f	class:Entities::Characters::Enemies::Horse	typeref:typename:void
setPoints	Player.cpp	/^void Entities::Characters::Player::setPoints(int Points) {this->Points = Points;}$/;"	f	class:Entities::Characters::Player	typeref:typename:void
setPosition	Entity.cpp	/^void Entity::setPosition(float x, float y)$/;"	f	class:Entity	typeref:typename:void
setPosition	Entity.cpp	/^void Entity::setPosition(sf::Vector2f pos)$/;"	f	class:Entity	typeref:typename:void
setRightLimit	GraphicManager.cpp	/^void Managers::GraphicManager::setRightLimit(float limit)$/;"	f	class:Managers::GraphicManager	typeref:typename:void
setSList	CollisionManager.cpp	/^void Managers::CollisionManager::setSList(Math::List<Entities::Entity>& ents)$/;"	f	class:Managers::CollisionManager	typeref:typename:void
setStateMachine	State.cpp	/^void States::State::setStateMachine(StateMachine* pSMachine)$/;"	f	class:States::State	typeref:typename:void
setTwoPlayers	Level.cpp	/^void Levels::Level::setTwoPlayers(bool twoPlayers) {Levels::Level::twoPlayers = twoPlayers;}$/;"	f	class:Levels::Level	typeref:typename:void
setVelocity	Entity.cpp	/^void Entity::setVelocity(float x, float y)$/;"	f	class:Entity	typeref:typename:void
setVelocity	Entity.cpp	/^void Entity::setVelocity(sf::Vector2f vel)$/;"	f	class:Entity	typeref:typename:void
setpInputManager	EventsManager.cpp	/^void Managers::EventsManager::setpInputManager(Managers::InputManager* pIM)$/;"	f	class:Managers::EventsManager	typeref:typename:void
setpPlayer	PlayerInputManager.cpp	/^void PlayerInputManager::setpPlayer(Entities::Characters::Player *pP)$/;"	f	class:PlayerInputManager	typeref:typename:void
setpPlayer2	PlayerInputManager.cpp	/^void PlayerInputManager::setpPlayer2(Entities::Characters::Player *pP)$/;"	f	class:PlayerInputManager	typeref:typename:void
swap	GameOverState.cpp	/^void States::GameOverState::swap(std::vector<int> &A, int i, int j, std::vector<std::string> &B)$/;"	f	class:States::GameOverState	typeref:typename:void
updateDeltaTime	Entity.cpp	/^void Entity::updateDeltaTime(float dt)$/;"	f	class:Entity	typeref:typename:void
updateDeltaTime	GraphicManager.cpp	/^void Managers::GraphicManager::updateDeltaTime()$/;"	f	class:Managers::GraphicManager	typeref:typename:void
~Alaska	Alaska.cpp	/^Levels::Alaska::~Alaska()$/;"	f	class:Levels::Alaska
~Animation	Animation.cpp	/^GraphicElements::Animation::~Animation()$/;"	f	class:GraphicElements::Animation
~Archer	Archer.cpp	/^dEnemy::Archer::~Archer()$/;"	f	class:dEnemy::Archer
~Arrow	Arrow.cpp	/^Entities::Projectiles::Arrow::~Arrow(){ } $/;"	f	class:Entities::Projectiles::Arrow
~Being	Being.cpp	/^Being::~Being()$/;"	f	class:Being
~Button	Button.cpp	/^GraphicElements::Button::~Button()$/;"	f	class:GraphicElements::Button
~Character	Character.cpp	/^Entities::Characters::Character::~Character()$/;"	f	class:Entities::Characters::Character
~CollisionManager	CollisionManager.cpp	/^Managers::CollisionManager::~CollisionManager()$/;"	f	class:Managers::CollisionManager
~ComplexAnimation	ComplexAnimation.cpp	/^GraphicElements::ComplexAnimation::~ComplexAnimation()$/;"	f	class:GraphicElements::ComplexAnimation
~Enemy	Enemy.cpp	/^dEnemy::Enemy::~Enemy()$/;"	f	class:dEnemy::Enemy
~Entity	Entity.cpp	/^Entity::~Entity()$/;"	f	class:Entity
~EntityList	EntityList.cpp	/^Math::EntityList::~EntityList()$/;"	f	class:Math::EntityList
~EventsManager	EventsManager.cpp	/^Managers::EventsManager::~EventsManager()$/;"	f	class:Managers::EventsManager
~Game	Game.cpp	/^Game::~Game()$/;"	f	class:Game
~GameOverState	GameOverState.cpp	/^States::GameOverState::~GameOverState()$/;"	f	class:States::GameOverState
~GraphicManager	GraphicManager.cpp	/^Managers::GraphicManager::~GraphicManager()$/;"	f	class:Managers::GraphicManager
~Ground	Ground.cpp	/^Entities::Obstacles::Ground::~Ground()$/;"	f	class:Entities::Obstacles::Ground
~Horse	Horse.cpp	/^Entities::Characters::Enemies::Horse::~Horse()$/;"	f	class:Entities::Characters::Enemies::Horse
~Ice	Ice.cpp	/^Entities::Obstacles::Ice::~Ice()$/;"	f	class:Entities::Obstacles::Ice
~InputManager	InputManager.cpp	/^Managers::InputManager::~InputManager()$/;"	f	class:Managers::InputManager
~Lava	Lava.cpp	/^Entities::Obstacles::Lava::~Lava()$/;"	f	class:Entities::Obstacles::Lava
~LeaderBoard	LeaderBoard.cpp	/^Menus::LeaderBoard::~LeaderBoard()$/;"	f	class:Menus::LeaderBoard
~Level	Level.cpp	/^Levels::Level::~Level()$/;"	f	class:Levels::Level
~LoadGameState	LoadGameState.cpp	/^States::LoadGameState::~LoadGameState()$/;"	f	class:States::LoadGameState
~MainMenu	MainMenu.cpp	/^Menus::MainMenu::~MainMenu()$/;"	f	class:Menus::MainMenu
~Menu	Menu.cpp	/^Menus::Menu::~Menu()$/;"	f	class:Menus::Menu
~MenuObserver	MenuObserver.cpp	/^Observers::MenuObserver::~MenuObserver()$/;"	f	class:Observers::MenuObserver
~NewGameMenu	NewGameMenu.cpp	/^Menus::NewGameMenu::~NewGameMenu()$/;"	f	class:Menus::NewGameMenu
~Observer	Observer.cpp	/^Observers::Observer::~Observer()$/;"	f	class:Observers::Observer
~Obstacle	Obstacle.cpp	/^Entities::Obstacles::Obstacle::~Obstacle()$/;"	f	class:Entities::Obstacles::Obstacle
~PauseMenu	PauseMenu.cpp	/^Menus::PauseMenu::~PauseMenu()$/;"	f	class:Menus::PauseMenu
~PlasmaBall	PlayerProjectile.cpp	/^Entities::Projectiles::PlasmaBall::~PlasmaBall(){ } $/;"	f	class:Entities::Projectiles::PlasmaBall
~Player	Player.cpp	/^Entities::Characters::Player::~Player()$/;"	f	class:Entities::Characters::Player
~PlayerInputManager	PlayerInputManager.cpp	/^PlayerInputManager::~PlayerInputManager()$/;"	f	class:PlayerInputManager
~Projectile	Projectile.cpp	/^Entities::Projectiles::Projectile::~Projectile()$/;"	f	class:Entities::Projectiles::Projectile
~SimpleAnimation	SimpleAnimation.cpp	/^GraphicElements::SimpleAnimation::~SimpleAnimation()$/;"	f	class:GraphicElements::SimpleAnimation
~SimpleSprite	SimpleSprite.cpp	/^GraphicElements::SimpleSprite::~SimpleSprite()$/;"	f	class:GraphicElements::SimpleSprite
~Skull	Skull.cpp	/^Entities::Projectiles::Skull::~Skull()$/;"	f	class:Entities::Projectiles::Skull
~State	State.cpp	/^States::State::~State()$/;"	f	class:States::State
~StateMachine	StateMachine.cpp	/^States::StateMachine::~StateMachine()$/;"	f	class:States::StateMachine
~TextInputObserver	TextInputObserver.cpp	/^Observers::TextInputObserver::~TextInputObserver()$/;"	f	class:Observers::TextInputObserver
~Vulcano	Vulcano.cpp	/^Levels::Vulcano::~Vulcano()$/;"	f	class:Levels::Vulcano
~Warrior	Warrior.cpp	/^dEnemy::Warrior::~Warrior()$/;"	f	class:dEnemy::Warrior
